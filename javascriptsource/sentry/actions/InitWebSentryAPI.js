// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
import { Big } from "big.js";

// BEGIN EXTRA CODE
import * as SentryAPI from "@sentry/browser";
// END EXTRA CODE

/**
 * @param {MxObject} configuration
 * @returns {Promise.<void>}
 */
export async function InitWebSentryAPI(configuration) {
	// BEGIN USER CODE
	if (!configuration)
		throw new Error("No Sentry configuration supplied.");
	let sentryConfig = {
        dsn: configuration.get("DSN")
        // defaultIntegrations: false
    };
    window.MENDIXLOGLEVEL = configuration.get("LogLevel");
	if (!window.MENDIXLOGLEVEL) {
        window.MENDIXLOGLEVEL = "WARNING";
    }

	let additionalConfig = configuration.get("Configuration");
    if (additionalConfig && additionalConfig.startsWith('{')) {
        sentryConfig = {
            ...sentryConfig,
            ...JSON.parse(additionalConfig)
        };
    }

	console.info("[Sentry] Initializing using configuration: ", sentryConfig);
   
    SentryAPI.init(sentryConfig);
	mx.logger.addHandler((level, message) => {
        if (message.startsWith("Sentry Logger")) return;
        let severity = null;
        switch(String(level)) {
            case "critical":
                severity = SentryAPI.Severity.Critical;
                break;
            case "error":
                switch (String(window.MENDIMENDIXLOGLEVEL)) {
                    case "CRITICAL": return;
                }
                severity = SentryAPI.Severity.Error;
                break;
            case "warning":
                switch (String(window.MENDIMENDIXLOGLEVEL)) {
                    case "CRITICAL": return;
                    case "ERROR": return;
                }
                severity = SentryAPI.Severity.Warning;
                break;
            case "info":
                switch (String(window.MENDIMENDIXLOGLEVEL)) {
                    case "CRITICAL": return;
                    case "ERROR": return;
                    case "WARNING": return;
                }
                severity = SentryAPI.Severity.Info;
                break;
            case "debug":
                switch (String(window.MENDIMENDIXLOGLEVEL)) {
                    case "CRITICAL": return;
                    case "ERROR": return;
                    case "WARNING": return;
                    case "INFO": return;
                }
                severity = SentryAPI.Severity.Debug;
                break;
            case "trace":
                switch (String(window.MENDIMENDIXLOGLEVEL)) {
                    case "CRITICAL": return;
                    case "ERROR": return;
                    case "WARNING": return;
                    case "INFO": return;
                    case "DEBUG": return;
                }
                severity = SentryAPI.Severity.Trace;
                break;
            default:
                alert("[Sentry] Unknown level: " + level);
                return;
        }
        SentryAPI.captureMessage(message, severity);
    });
    
    mx._onError = mx.onError;
    mx.onError = function(e) {
        SentryAPI.captureException(e, true);
        console.info("[Sentry] Exception catched!");
        mx._onError(e);
    }
    
    console.info("[Sentry] Initialized..");

	// END USER CODE
}
