{"version":3,"file":"debugsymbolicator.js","sourceRoot":"","sources":["../../../src/js/integrations/debugsymbolicator.ts"],"names":[],"mappings":"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","sourcesContent":["import { addGlobalEventProcessor, getCurrentHub } from \"@sentry/core\";\nimport { Event, EventHint, Integration, StackFrame } from \"@sentry/types\";\nimport { addContextToFrame, logger } from \"@sentry/utils\";\n\nconst INTERNAL_CALLSITES_REGEX = new RegExp(\n  [\"ReactNativeRenderer-dev\\\\.js$\", \"MessageQueue\\\\.js$\"].join(\"|\")\n);\n\ninterface GetDevServer {\n  (): { url: string };\n}\n\n/**\n * React Native Stack Frame\n */\ninterface ReactNativeFrame {\n  // arguments: []\n  column: number;\n  file: string;\n  lineNumber: number;\n  methodName: string;\n}\n\n/**\n * React Native Error\n */\ntype ReactNativeError = Error & {\n  framesToPop?: number;\n  jsEngine?: string;\n  preventSymbolication?: boolean;\n  componentStack?: string;\n};\n\n/** Tries to symbolicate the JS stack trace on the device. */\nexport class DebugSymbolicator implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = \"DebugSymbolicator\";\n  /**\n   * @inheritDoc\n   */\n  public name: string = DebugSymbolicator.id;\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    addGlobalEventProcessor(async (event: Event, hint?: EventHint) => {\n      const self = getCurrentHub().getIntegration(DebugSymbolicator);\n\n      if (!self || hint === undefined || hint.originalException === undefined) {\n        return event;\n      }\n\n      const reactError = hint.originalException as ReactNativeError;\n\n      // eslint-disable-next-line @typescript-eslint/no-var-requires\n      const parseErrorStack = require(\"react-native/Libraries/Core/Devtools/parseErrorStack\");\n\n      let stack;\n      try {\n        stack = parseErrorStack(reactError);\n      } catch (e) {\n        // In RN 0.64 `parseErrorStack` now only takes a string\n        stack = parseErrorStack(reactError.stack);\n      }\n\n      // Ideally this should go into contexts but android sdk doesn't support it\n      event.extra = {\n        ...event.extra,\n        componentStack: reactError.componentStack,\n        jsEngine: reactError.jsEngine,\n      };\n\n      await self._symbolicate(event, stack);\n\n      event.platform = \"node\"; // Setting platform node makes sure we do not show source maps errors\n\n      return event;\n    });\n  }\n\n  /**\n   * Symbolicates the stack on the device talking to local dev server.\n   * Mutates the passed event.\n   */\n  private async _symbolicate(\n    event: Event,\n    stack: string | undefined\n  ): Promise<void> {\n    try {\n      // eslint-disable-next-line @typescript-eslint/no-var-requires\n      const symbolicateStackTrace = require(\"react-native/Libraries/Core/Devtools/symbolicateStackTrace\");\n      const prettyStack = await symbolicateStackTrace(stack);\n\n      if (prettyStack) {\n        let newStack = prettyStack;\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        if (prettyStack.stack) {\n          // This has been changed in an react-native version so stack is contained in here\n          // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n          newStack = prettyStack.stack;\n        }\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        const stackWithoutInternalCallsites = newStack.filter(\n          (frame: { file?: string }) =>\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n            frame.file && frame.file.match(INTERNAL_CALLSITES_REGEX) === null\n        );\n\n        const symbolicatedFrames = await this._convertReactNativeFramesToSentryFrames(\n          stackWithoutInternalCallsites\n        );\n        this._replaceFramesInEvent(event, symbolicatedFrames);\n      } else {\n        logger.error(\"The stack is null\");\n      }\n    } catch (error) {\n      if (error instanceof Error) {\n        logger.warn(`Unable to symbolicate stack trace: ${error.message}`);\n      }\n    }\n  }\n\n  /**\n   * Converts ReactNativeFrames to frames in the Sentry format\n   * @param frames ReactNativeFrame[]\n   */\n  private async _convertReactNativeFramesToSentryFrames(\n    frames: ReactNativeFrame[]\n  ): Promise<StackFrame[]> {\n    let getDevServer: GetDevServer;\n    try {\n      getDevServer = require(\"react-native/Libraries/Core/Devtools/getDevServer\");\n    } catch (_oO) {\n      // We can't load devserver URL\n    }\n    // Below you will find lines marked with :HACK to prevent showing errors in the sentry ui\n    // But since this is a debug only feature: This is Fine (TM)\n    return Promise.all(\n      frames.map(\n        async (frame: ReactNativeFrame): Promise<StackFrame> => {\n          let inApp = !!frame.column && !!frame.lineNumber;\n          inApp =\n            inApp &&\n            frame.file !== undefined &&\n            !frame.file.includes(\"node_modules\") &&\n            !frame.file.includes(\"native code\");\n\n          const newFrame: StackFrame = {\n            colno: frame.column,\n            filename: frame.file,\n            function: frame.methodName,\n            in_app: inApp,\n            lineno: inApp ? frame.lineNumber : undefined, // :HACK\n            platform: inApp ? \"javascript\" : \"node\", // :HACK\n          };\n\n          // The upstream `react-native@0.61` delegates parsing of stacks to `stacktrace-parser`, which is buggy and\n          // leaves a trailing `(address at` in the function name.\n          // `react-native@0.62` seems to have custom logic to parse hermes frames specially.\n          // Anyway, all we do here is throw away the bogus suffix.\n          if (newFrame.function) {\n            const addressAtPos = newFrame.function.indexOf(\"(address at\");\n            if (addressAtPos >= 0) {\n              newFrame.function = newFrame.function\n                .substr(0, addressAtPos)\n                .trim();\n            }\n          }\n\n          if (inApp) {\n            await this._addSourceContext(newFrame, getDevServer);\n          }\n\n          return newFrame;\n        }\n      )\n    );\n  }\n\n  /**\n   * Replaces the frames in the exception of a error.\n   * @param event Event\n   * @param frames StackFrame[]\n   */\n  private _replaceFramesInEvent(event: Event, frames: StackFrame[]): void {\n    if (\n      event.exception &&\n      event.exception.values &&\n      event.exception.values[0] &&\n      event.exception.values[0].stacktrace\n    ) {\n      event.exception.values[0].stacktrace.frames = frames.reverse();\n    }\n  }\n\n  /**\n   * This tries to add source context for in_app Frames\n   *\n   * @param frame StackFrame\n   * @param getDevServer function from RN to get DevServer URL\n   */\n  private async _addSourceContext(\n    frame: StackFrame,\n    getDevServer?: GetDevServer\n  ): Promise<void> {\n    let response;\n\n    const segments = frame.filename?.split(\"/\") ?? [];\n\n    if (getDevServer) {\n      for (const idx in segments) {\n        if (Object.prototype.hasOwnProperty.call(segments, idx)) {\n          response = await fetch(\n            `${getDevServer().url}${segments.slice(-idx).join(\"/\")}`,\n            {\n              method: \"GET\",\n            }\n          );\n\n          if (response.ok) {\n            break;\n          }\n        }\n      }\n    }\n\n    if (response && response.ok) {\n      const content = await response.text();\n      const lines = content.split(\"\\n\");\n\n      addContextToFrame(lines, frame);\n    }\n  }\n}\n"]}