{"version":3,"file":"reactnativetracing.js","sourceRoot":"","sources":["../../../src/js/tracing/reactnativetracing.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  defaultRequestInstrumentationOptions,\n  registerRequestInstrumentation,\n  RequestInstrumentationOptions,\n  startIdleTransaction,\n} from \"@sentry/tracing\";\nimport {\n  EventProcessor,\n  Hub,\n  Integration,\n  Transaction as TransactionType,\n  TransactionContext,\n} from \"@sentry/types\";\nimport { logger } from \"@sentry/utils\";\n\nimport { RoutingInstrumentationInstance } from \"../tracing/routingInstrumentation\";\nimport { adjustTransactionDuration } from \"./utils\";\n\nexport type BeforeNavigate = (\n  context: TransactionContext\n) => TransactionContext;\n\nexport interface ReactNativeTracingOptions\n  extends RequestInstrumentationOptions {\n  /**\n   * The time to wait in ms until the transaction will be finished. The transaction will use the end timestamp of\n   * the last finished span as the endtime for the transaction.\n   * Time is in ms.\n   *\n   * Default: 1000\n   */\n  idleTimeout: number;\n\n  /**\n   * The maximum duration of a transaction before it will be marked as \"deadline_exceeded\".\n   * If you never want to mark a transaction set it to 0.\n   * Time is in seconds.\n   *\n   * Default: 600\n   */\n  maxTransactionDuration: number;\n\n  /**\n   * The routing instrumentation to be used with the tracing integration.\n   * There is no routing instrumentation if nothing is passed.\n   */\n  routingInstrumentation?: RoutingInstrumentationInstance;\n\n  /**\n   * Does not sample transactions that are from routes that have been seen any more and don't have any spans.\n   * This removes a lot of the clutter as most back navigation transactions are now ignored.\n   *\n   * Default: true\n   */\n  ignoreEmptyBackNavigationTransactions: boolean;\n\n  /**\n   * beforeNavigate is called before a navigation transaction is created and allows users to modify transaction\n   * context data, or drop the transaction entirely (by setting `sampled = false` in the context).\n   *\n   * @param context: The context data which will be passed to `startTransaction` by default\n   *\n   * @returns A (potentially) modified context object, with `sampled = false` if the transaction should be dropped.\n   */\n  beforeNavigate: BeforeNavigate;\n}\n\nconst defaultReactNativeTracingOptions: ReactNativeTracingOptions = {\n  ...defaultRequestInstrumentationOptions,\n  idleTimeout: 1000,\n  maxTransactionDuration: 600,\n  ignoreEmptyBackNavigationTransactions: true,\n  beforeNavigate: (context) => context,\n};\n\n/**\n * Tracing integration for React Native.\n */\nexport class ReactNativeTracing implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = \"ReactNativeTracing\";\n  /**\n   * @inheritDoc\n   */\n  public name: string = ReactNativeTracing.id;\n\n  /** ReactNativeTracing options */\n  public options: ReactNativeTracingOptions;\n\n  private _getCurrentHub?: () => Hub;\n\n  constructor(options: Partial<ReactNativeTracingOptions> = {}) {\n    this.options = {\n      ...defaultReactNativeTracingOptions,\n      ...options,\n    };\n  }\n\n  /**\n   *  Registers routing and request instrumentation.\n   */\n  public setupOnce(\n    // @ts-ignore TODO\n    addGlobalEventProcessor: (callback: EventProcessor) => void,\n    getCurrentHub: () => Hub\n  ): void {\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    const {\n      traceFetch,\n      traceXHR,\n      tracingOrigins,\n      // @ts-ignore TODO\n      shouldCreateSpanForRequest,\n      routingInstrumentation,\n    } = this.options;\n\n    this._getCurrentHub = getCurrentHub;\n\n    routingInstrumentation?.registerRoutingInstrumentation(\n      this._onRouteWillChange.bind(this),\n      this.options.beforeNavigate\n    );\n\n    if (!routingInstrumentation) {\n      logger.log(\n        `[ReactNativeTracing] Not instrumenting route changes as routingInstrumentation has not been set.`\n      );\n    }\n\n    registerRequestInstrumentation({\n      traceFetch,\n      traceXHR,\n      tracingOrigins,\n      shouldCreateSpanForRequest,\n    });\n  }\n\n  /** To be called when the route changes, but BEFORE the components of the new route mount. */\n  private _onRouteWillChange(\n    context: TransactionContext\n  ): TransactionType | undefined {\n    // TODO: Consider more features on route change, one example is setting a tag of what route the user is on\n    return this._createRouteTransaction(context);\n  }\n\n  /** Create routing idle transaction. */\n  private _createRouteTransaction(\n    context: TransactionContext\n  ): TransactionType | undefined {\n    if (!this._getCurrentHub) {\n      logger.warn(\n        `[ReactNativeTracing] Did not create ${context.op} transaction because _getCurrentHub is invalid.`\n      );\n      return undefined;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    const { idleTimeout, maxTransactionDuration } = this.options;\n\n    const expandedContext = {\n      ...context,\n      trimEnd: true,\n    };\n\n    const hub = this._getCurrentHub();\n    const idleTransaction = startIdleTransaction(\n      hub as any,\n      expandedContext,\n      idleTimeout,\n      true\n    );\n    logger.log(\n      `[ReactNativeTracing] Starting ${context.op} transaction \"${context.name}\" on scope`\n    );\n    idleTransaction.registerBeforeFinishCallback(\n      (transaction, endTimestamp) => {\n        adjustTransactionDuration(\n          maxTransactionDuration,\n          transaction,\n          endTimestamp\n        );\n      }\n    );\n\n    if (this.options.ignoreEmptyBackNavigationTransactions) {\n      idleTransaction.registerBeforeFinishCallback((transaction) => {\n        if (\n          // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n          transaction.data?.route?.hasBeenSeen &&\n          (!transaction.spanRecorder ||\n            transaction.spanRecorder.spans.filter(\n              (span) => span.spanId !== transaction.spanId\n            ).length === 0)\n        ) {\n          logger.log(\n            `[ReactNativeTracing] Not sampling transaction as route has been seen before. Pass ignoreEmptyBackNavigationTransactions = false to disable this feature.`\n          );\n          // Route has been seen before and has no child spans.\n          transaction.sampled = false;\n        }\n      });\n    }\n\n    return idleTransaction as TransactionType;\n  }\n}\n"]}