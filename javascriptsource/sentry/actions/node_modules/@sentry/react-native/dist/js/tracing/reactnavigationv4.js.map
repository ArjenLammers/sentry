{"version":3,"file":"reactnavigationv4.js","sourceRoot":"","sources":["../../../src/js/tracing/reactnavigationv4.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable max-lines */\nimport { Transaction } from \"@sentry/types\";\nimport { getGlobalObject, logger } from \"@sentry/utils\";\n\nimport { BeforeNavigate } from \"./reactnativetracing\";\nimport {\n  RoutingInstrumentation,\n  TransactionCreator,\n} from \"./routingInstrumentation\";\nimport { ReactNavigationTransactionContext } from \"./types\";\n\nexport interface NavigationRouteV4 {\n  routeName: string;\n  key: string;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  params?: Record<string, any>;\n}\n\nexport interface NavigationStateV4 {\n  index: number;\n  key: string;\n  isTransitioning: boolean;\n  routeName?: string;\n  routes: (NavigationRouteV4 | NavigationStateV4)[];\n}\n\nexport interface AppContainerInstance {\n  _navigation: {\n    state: NavigationStateV4;\n    router: {\n      getStateForAction: (\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        action: any,\n        state: NavigationStateV4\n      ) => NavigationStateV4;\n    };\n  };\n}\n\ninterface ReactNavigationV4Options {\n  /**\n   * The time the transaction will wait for route to mount before it is discarded.\n   */\n  routeChangeTimeoutMs: number;\n}\n\nconst defaultOptions: ReactNavigationV4Options = {\n  routeChangeTimeoutMs: 1000,\n};\n\n/**\n * Instrumentation for React-Navigation V4.\n * Register the app container with `registerAppContainer` to use, or see docs for more details.\n */\nclass ReactNavigationV4Instrumentation extends RoutingInstrumentation {\n  static instrumentationName: string = \"react-navigation-v4\";\n\n  private _appContainer: AppContainerInstance | null = null;\n\n  private readonly _maxRecentRouteLen: number = 200;\n\n  private _prevRoute?: NavigationRouteV4;\n  private _recentRouteKeys: string[] = [];\n\n  private _latestTransaction?: Transaction;\n  private _initialStateHandled: boolean = false;\n  private _stateChangeTimeout?: number | undefined;\n\n  private _options: ReactNavigationV4Options;\n\n  constructor(options: Partial<ReactNavigationV4Options> = {}) {\n    super();\n\n    this._options = {\n      ...defaultOptions,\n      ...options,\n    };\n  }\n\n  /**\n   * Extends by calling _handleInitialState at the end.\n   */\n  public registerRoutingInstrumentation(\n    listener: TransactionCreator,\n    beforeNavigate: BeforeNavigate\n  ): void {\n    super.registerRoutingInstrumentation(listener, beforeNavigate);\n\n    // Need to handle the initial state as the router patch will only attach transactions on subsequent route changes.\n    if (!this._initialStateHandled) {\n      this._latestTransaction = this.onRouteWillChange(\n        INITIAL_TRANSACTION_CONTEXT_V4\n      );\n      if (this._appContainer) {\n        this._updateLatestTransaction();\n\n        this._initialStateHandled = true;\n      } else {\n        this._stateChangeTimeout = setTimeout(\n          this._discardLatestTransaction.bind(this),\n          this._options.routeChangeTimeoutMs\n        );\n      }\n    }\n  }\n\n  /**\n   * Pass the ref to the app container to register it to the instrumentation\n   * @param appContainerRef Ref to an `AppContainer`\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  public registerAppContainer(appContainerRef: any): void {\n    const _global = getGlobalObject<{ __sentry_rn_v4_registered?: boolean }>();\n\n    /* We prevent duplicate routing instrumentation to be initialized on fast refreshes\n\n      Explanation: If the user triggers a fast refresh on the file that the instrumentation is\n      initialized in, it will initialize a new instance and will cause undefined behavior.\n     */\n    if (!_global.__sentry_rn_v4_registered) {\n      if (\"current\" in appContainerRef) {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        this._appContainer = appContainerRef.current;\n      } else {\n        this._appContainer = appContainerRef;\n      }\n\n      if (this._appContainer) {\n        this._patchRouter();\n\n        if (!this._initialStateHandled) {\n          if (this._latestTransaction) {\n            this._updateLatestTransaction();\n          } else {\n            logger.log(\n              \"[ReactNavigationV4Instrumentation] App container registered, but integration has not been setup yet.\"\n            );\n          }\n          this._initialStateHandled = true;\n        }\n\n        _global.__sentry_rn_v4_registered = true;\n      } else {\n        logger.warn(\n          \"[ReactNavigationV4Instrumentation] Received invalid app container ref!\"\n        );\n      }\n    }\n  }\n\n  /**\n   * Updates the latest transaction with the current state and calls beforeNavigate.\n   */\n  private _updateLatestTransaction(): void {\n    // We can assume the ref is present as this is called from registerAppContainer\n    if (this._appContainer && this._latestTransaction) {\n      const state = this._appContainer._navigation.state;\n\n      if (typeof this._stateChangeTimeout !== \"undefined\") {\n        clearTimeout(this._stateChangeTimeout);\n        this._stateChangeTimeout = undefined;\n      }\n\n      this._onStateChange(state, true);\n    }\n  }\n\n  /**\n   * Patches the react navigation router so we can listen to the route changes and attach the `IdleTransaction` before the\n   * new screen is mounted.\n   */\n  private _patchRouter(): void {\n    if (this._appContainer) {\n      const originalGetStateForAction = this._appContainer._navigation.router\n        .getStateForAction;\n\n      this._appContainer._navigation.router.getStateForAction = (\n        action,\n        state\n      ) => {\n        const newState = originalGetStateForAction(action, state);\n\n        this._onStateChange(newState);\n\n        return newState;\n      };\n    }\n  }\n\n  /**\n   * To be called on navigation state changes and creates the transaction.\n   */\n  private _onStateChange(\n    state: NavigationStateV4,\n    updateLatestTransaction: boolean = false\n  ): void {\n    const currentRoute = this._getCurrentRouteFromState(state);\n\n    // If the route is a different key, this is so we ignore actions that pertain to the same screen.\n    if (!this._prevRoute || currentRoute.key !== this._prevRoute.key) {\n      const originalContext = this._getTransactionContext(\n        currentRoute,\n        this._prevRoute\n      );\n\n      let mergedContext = originalContext;\n      if (updateLatestTransaction && this._latestTransaction) {\n        mergedContext = {\n          ...this._latestTransaction.toContext(),\n          ...originalContext,\n        };\n      }\n\n      let finalContext = this._beforeNavigate?.(mergedContext);\n\n      // This block is to catch users not returning a transaction context\n      if (!finalContext) {\n        logger.error(\n          `[ReactNavigationV4Instrumentation] beforeNavigate returned ${finalContext}, return context.sampled = false to not send transaction.`\n        );\n\n        finalContext = {\n          ...mergedContext,\n          sampled: false,\n        };\n      }\n\n      if (finalContext.sampled === false) {\n        this._onBeforeNavigateNotSampled(finalContext.name);\n      }\n\n      if (updateLatestTransaction && this._latestTransaction) {\n        // Update the latest transaction instead of calling onRouteWillChange\n        this._latestTransaction.updateWithContext(finalContext);\n      } else {\n        this._latestTransaction = this.onRouteWillChange(finalContext);\n      }\n\n      this._pushRecentRouteKey(currentRoute.key);\n      this._prevRoute = currentRoute;\n    }\n  }\n\n  /**\n   * Gets the transaction context for a `NavigationRouteV4`\n   */\n  private _getTransactionContext(\n    route: NavigationRouteV4,\n    previousRoute?: NavigationRouteV4\n  ): ReactNavigationTransactionContext {\n    return {\n      name: route.routeName,\n      op: \"navigation\",\n      tags: {\n        \"routing.instrumentation\":\n          ReactNavigationV4Instrumentation.instrumentationName,\n        \"routing.route.name\": route.routeName,\n      },\n      data: {\n        route: {\n          name: route.routeName, // Include name here too for use in `beforeNavigate`\n          key: route.key,\n          params: route.params ?? {},\n          hasBeenSeen: this._recentRouteKeys.includes(route.key),\n        },\n        previousRoute: previousRoute\n          ? {\n              name: previousRoute.routeName,\n              key: previousRoute.key,\n              params: previousRoute.params ?? {},\n            }\n          : null,\n      },\n    };\n  }\n\n  /**\n   * Gets the current route given a navigation state\n   */\n  private _getCurrentRouteFromState(\n    state: NavigationStateV4\n  ): NavigationRouteV4 {\n    const parentRoute = state.routes[state.index];\n\n    if (\n      \"index\" in parentRoute &&\n      \"routes\" in parentRoute &&\n      typeof parentRoute.index === \"number\" &&\n      Array.isArray(parentRoute.routes)\n    ) {\n      return this._getCurrentRouteFromState(parentRoute);\n    }\n\n    return parentRoute as NavigationRouteV4;\n  }\n\n  /** Pushes a recent route key, and removes earlier routes when there is greater than the max length */\n  private _pushRecentRouteKey = (key: string): void => {\n    this._recentRouteKeys.push(key);\n\n    if (this._recentRouteKeys.length > this._maxRecentRouteLen) {\n      this._recentRouteKeys = this._recentRouteKeys.slice(\n        this._recentRouteKeys.length - this._maxRecentRouteLen\n      );\n    }\n  };\n\n  /** Helper to log a transaction that was not sampled due to beforeNavigate */\n  private _onBeforeNavigateNotSampled = (transactionName: string): void => {\n    logger.log(\n      `[ReactNavigationV4Instrumentation] Will not send transaction \"${transactionName}\" due to beforeNavigate.`\n    );\n  };\n\n  /** Cancels the latest transaction so it does not get sent to Sentry. */\n  private _discardLatestTransaction(): void {\n    if (this._latestTransaction) {\n      this._latestTransaction.sampled = false;\n      this._latestTransaction.finish();\n      this._latestTransaction = undefined;\n    }\n  }\n}\n\nconst INITIAL_TRANSACTION_CONTEXT_V4 = {\n  name: \"App Launch\",\n  op: \"navigation\",\n  tags: {\n    \"routing.instrumentation\":\n      ReactNavigationV4Instrumentation.instrumentationName,\n  },\n  data: {},\n};\n\nexport { ReactNavigationV4Instrumentation, INITIAL_TRANSACTION_CONTEXT_V4 };\n"]}