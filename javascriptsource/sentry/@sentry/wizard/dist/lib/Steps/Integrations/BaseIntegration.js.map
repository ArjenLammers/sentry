{"version":3,"file":"BaseIntegration.js","sourceRoot":"","sources":["../../../../lib/Steps/Integrations/BaseIntegration.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,0BAA4B;AAE5B,wCAAuC;AAEvC;IAA8C,mCAAQ;IAIpD,yBAAsB,IAAU;QAAhC,YACE,kBAAM,IAAI,CAAC,SAEZ;QAHqB,UAAI,GAAJ,IAAI,CAAM;QAE9B,KAAI,CAAC,IAAI,GAAG,KAAI,CAAC,WAAW,CAAC,IAAI,CAAC;;IACpC,CAAC;IAIY,mCAAS,GAAtB,UAAuB,OAAgB;;;gBACrC,sBAAO,EAAE,EAAC;;;KACX;IAED;;;;OAIG;IACU,yCAAe,GAA5B,UAA6B,OAAgB;;;gBAC3C,IAAI,IAAI,CAAC,gBAAgB,EAAE;oBACzB,sBAAO,IAAI,CAAC,gBAAgB,EAAC;iBAC9B;gBACD,IAAI,CAAC,gBAAgB,GAAG,OAAO,CAAC,OAAO,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC;gBAC5D,sBAAO,IAAI,CAAC,gBAAgB,EAAC;;;KAC9B;IAEY,oCAAU,GAAvB,UAAwB,OAAgB;;;;;;wBAEpC,KAAA,CAAA,KAAA,CAAC,CAAA,CAAC,IAAI,CAAA;wBAAC,KAAA,CAAA,KAAA,CAAC,CAAA,CAAC,MAAM,CAAA;wBAAC,qBAAM,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,EAAA;4BADrD,sBAAO,CACL,cAAO,cAAS,SAAmC,EAAE,UAAC,MAAe,IAAK,OAAA,MAAM,EAAN,CAAM,EAAC,EAAC;6BAC/E,MAAM,GAAG,CAAC,CACd,EAAC;;;;KACH;IACH,sBAAC;AAAD,CAAC,AAlCD,CAA8C,mBAAQ,GAkCrD;AAlCqB,0CAAe","sourcesContent":["import { Answers, prompt } from 'inquirer';\nimport * as _ from 'lodash';\nimport { Args } from '../../Constants';\nimport { BaseStep } from '../BaseStep';\n\nexport abstract class BaseIntegration extends BaseStep {\n  public type: string;\n  protected _shouldConfigure: Promise<Answers>;\n\n  constructor(protected argv: Args) {\n    super(argv);\n    this.type = this.constructor.name;\n  }\n\n  public abstract emit(answers: Answers): Promise<Answers>;\n\n  public async uninstall(answers: Answers): Promise<Answers> {\n    return {};\n  }\n\n  /**\n   * This can be used for example for platform:boolean to determine\n   * if we should configure iOS/Android.\n   * Basically this will be merged into answers so it can be check by a later step.\n   */\n  public async shouldConfigure(answers: Answers): Promise<Answers> {\n    if (this._shouldConfigure) {\n      return this._shouldConfigure;\n    }\n    this._shouldConfigure = Promise.resolve({ platform: true });\n    return this._shouldConfigure;\n  }\n\n  public async shouldEmit(answers: Answers): Promise<boolean> {\n    return (\n      _.keys(_.pickBy(await this.shouldConfigure(answers), (active: boolean) => active))\n        .length > 0\n    );\n  }\n}\n"]}