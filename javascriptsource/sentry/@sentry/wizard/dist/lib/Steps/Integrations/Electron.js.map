{"version":3,"file":"Electron.js","sourceRoot":"","sources":["../../../../lib/Steps/Integrations/Electron.ts"],"names":[],"mappings":"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","sourcesContent":["import * as fs from 'fs';\nimport { Answers, prompt, Question } from 'inquirer';\nimport * as _ from 'lodash';\nimport * as path from 'path';\nimport { Args } from '../../Constants';\nimport { exists } from '../../Helper/File';\nimport { debug, dim, green, l, nl, red } from '../../Helper/Logging';\nimport { SentryCli } from '../../Helper/SentryCli';\nimport { BaseIntegration } from './BaseIntegration';\n\nconst MIN_ELECTRON_VERSION_STRING = '1.7.0';\nconst MIN_ELECTRON_VERSION = parseInt(\n  MIN_ELECTRON_VERSION_STRING.replace(/\\D+/g, ''),\n  10,\n);\n\nconst CODE_EXAMPLE = `const Sentry = require('@sentry/electron');\n\nSentry.init({\n  dsn: '___DSN___',\n});`;\n\nconst UPLOAD_EXAMPLE = `npm install --save-dev @sentry/cli electron-download\nnode sentry-symbols.js`;\n\nlet appPackage: any = {};\n\nfunction printExample(example: string, title: string = ''): void {\n  if (title) {\n    l(title);\n  }\n\n  nl();\n  dim(example.replace(/^/gm, '    '));\n  nl();\n}\n\ntry {\n  appPackage = require(path.join(process.cwd(), 'package.json'));\n} catch {\n  // We don't need to have this\n}\n\nexport class Electron extends BaseIntegration {\n  protected sentryCli: SentryCli;\n\n  constructor(protected argv: Args) {\n    super(argv);\n    this.sentryCli = new SentryCli(this.argv);\n  }\n\n  public async emit(answers: Answers): Promise<Answers> {\n    const dsn = _.get(answers, ['config', 'dsn', 'public'], null);\n    nl();\n\n    const sentryCliProps = this.sentryCli.convertAnswersToProperties(answers);\n    fs.writeFileSync(\n      './sentry.properties',\n      this.sentryCli.dumpProperties(sentryCliProps),\n    );\n    green(`Successfully created sentry.properties`);\n    nl();\n\n    const symbolsScript = path.join(\n      __dirname,\n      '..',\n      '..',\n      '..',\n      'Electron',\n      'symbols.js',\n    );\n\n    if (fs.existsSync(symbolsScript)) {\n      fs.writeFileSync('sentry-symbols.js', fs.readFileSync(symbolsScript));\n    } else {\n      debug(\n        `Couldn't find ${symbolsScript}, probably because you run from src`,\n      );\n    }\n\n    printExample(\n      CODE_EXAMPLE.replace('___DSN___', dsn),\n      'Put these lines in to your main and renderer processes to setup Sentry:',\n    );\n\n    printExample(\n      UPLOAD_EXAMPLE,\n      'To upload debug information for native crashes when updating Electron, run:',\n    );\n\n    l('For more information, see https://docs.sentry.io/clients/electron/');\n    nl();\n\n    return {};\n  }\n\n  public async shouldConfigure(answers: Answers): Promise<Answers> {\n    if (this._shouldConfigure) {\n      return this._shouldConfigure;\n    }\n\n    let success = true;\n    nl();\n\n    success = this.checkDep('electron', MIN_ELECTRON_VERSION_STRING) && success;\n    success = this.checkDep('@sentry/electron') && success;\n\n    let continued: Answers = { continue: true };\n    if (!success && !this.argv.quiet) {\n      continued = await prompt({\n        message:\n          'There were errors during your project checkup, do you still want to continue?',\n        name: 'continue',\n        default: false,\n        type: 'confirm',\n      });\n    }\n\n    nl();\n\n    if (!_.get(continued, 'continue', false)) {\n      throw new Error('Please install the required dependencies to continue.');\n    }\n\n    this._shouldConfigure = Promise.resolve({ electron: true });\n    return this.shouldConfigure;\n  }\n\n  private checkDep(packageName: string, minVersion?: string): boolean {\n    const depVersion = parseInt(\n      _.get(appPackage, ['dependencies', packageName], '0').replace(/\\D+/g, ''),\n      10,\n    );\n    const devDepVersion = parseInt(\n      _.get(appPackage, ['devDependencies', packageName], '0').replace(\n        /\\D+/g,\n        '',\n      ),\n      10,\n    );\n\n    if (\n      !_.get(appPackage, `dependencies.${packageName}`, false) &&\n      !_.get(appPackage, `devDependencies.${packageName}`, false)\n    ) {\n      red(`✗ ${packageName} isn't in your dependencies`);\n      red(`  please install it with yarn/npm`);\n      return false;\n    } else if (\n      minVersion &&\n      depVersion < MIN_ELECTRON_VERSION &&\n      devDepVersion < MIN_ELECTRON_VERSION\n    ) {\n      red(\n        `✗ Your installed version of ${packageName} is to old, >${MIN_ELECTRON_VERSION_STRING} needed`,\n      );\n      return false;\n    } else {\n      minVersion\n        ? green(`✓ ${packageName} > ${minVersion} is installed`)\n        : green(`✓ ${packageName} is installed`);\n      return true;\n    }\n  }\n}\n"]}