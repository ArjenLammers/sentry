{"version":3,"file":"Cordova.js","sourceRoot":"","sources":["../../../../lib/Steps/Integrations/Cordova.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,uBAAyB;AAGzB,2BAA6B;AAE7B,0CAA8E;AAC9E,gDAA8D;AAC9D,oDAAmD;AACnD,qDAAoD;AAEpD,IAAM,KAAK,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC;AAE/B;IAA6B,2BAAe;IAK1C,iBAAsB,IAAU;QAAhC,YACE,kBAAM,IAAI,CAAC,SAEZ;QAHqB,UAAI,GAAJ,IAAI,CAAM;QAHtB,kBAAY,GAAG,WAAW,CAAC;QAC3B,kBAAY,GAAG,CAAC,GAAG,CAAC,CAAC;QAI7B,KAAI,CAAC,SAAS,GAAG,IAAI,qBAAS,CAAC,KAAI,CAAC,IAAI,CAAC,CAAC;;IAC5C,CAAC;IAEY,sBAAI,GAAjB,UAAkB,OAAgB;;;;;;wBAChC,IAAI,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;4BACvB,sBAAO,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,EAAC;yBAChC;wBAEK,mBAAmB,GAAG,IAAI,CAAC,SAAS,CAAC,0BAA0B,CACnE,OAAO,CACR,CAAC;wBAEF,qBAAM,wBAAiB,CAClB,IAAI,CAAC,YAAY,qCAAkC,EACtD,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,CAC/B,EAAA;;wBAHD,SAGC,CAAC;wBAEF,qBAAM,IAAI,CAAC,mBAAmB,CAAC,mBAAmB,CAAC,EAAA;;wBAAnD,SAAmD,CAAC;wBACpD,eAAK,CAAC,iCAAiC,CAAC,CAAC;wBAEzC,sBAAO,EAAE,EAAC;;;;KACX;IAEY,2BAAS,GAAtB,UAAuB,OAAgB;;;;4BACrC,qBAAM,wBAAiB,CACrB,gCAAgC,EAChC,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,CACjC,EAAA;;wBAHD,SAGC,CAAC;wBAEF,sBAAO,EAAE,EAAC;;;;KACX;IAEY,iCAAe,GAA5B,UAA6B,OAAgB;;;;gBAC3C,IAAI,IAAI,CAAC,gBAAgB,EAAE;oBACzB,sBAAO,IAAI,CAAC,gBAAgB,EAAC;iBAC9B;gBAEG,MAAM,GAAG,KAAK,CAAC;gBACnB,IAAI,CAAC,aAAM,CAAC,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC,EAAE;oBAC3C,MAAM,GAAG,IAAI,CAAC;oBACd,IAAI,CAAC,KAAK,CAAC,8BAA8B,CAAC,CAAC;iBAC5C;gBAED,IACE,CAAC,qBAAc,CAAC,gCAAgC,EAAE,qBAAqB,CAAC,EACxE;oBACA,MAAM,GAAG,IAAI,CAAC;oBACd,IAAI,CAAC,KAAK,CAAC,4CAA4C,CAAC,CAAC;iBAC1D;gBAED,IAAI,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;oBACvB,4EAA4E;oBAC5E,MAAM,GAAG,CAAC,MAAM,CAAC;iBAClB;gBAED,IAAI,CAAC,gBAAgB,GAAG,OAAO,CAAC,OAAO,CAAC,EAAE,OAAO,EAAE,MAAM,EAAE,CAAC,CAAC;gBAC7D,sBAAO,IAAI,CAAC,eAAe,EAAC;;;KAC7B;IAEO,kCAAgB,GAAxB,UACE,QAAgB,EAChB,QAAgB;QAFlB,iBAgBC;QAZC,IAAM,IAAI,GAAG,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;QACrC,OAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YACjC,IAAI,CAAC,KAAK,CAAC,UAAC,GAAQ;gBAClB,IAAI,GAAG,EAAE;oBACP,MAAM,CAAC,GAAG,CAAC,CAAC;oBACZ,OAAO;iBACR;gBAED,KAAI,CAAC,wBAAwB,CAAC,IAAI,CAAC,CAAC;gBACpC,OAAO,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC;YAC5B,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;IAEO,0CAAwB,GAAhC,UAAiC,IAAS;QACxC,IAAM,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,wBAAwB,IAAI,EAAE,CAAC;QACzE,IAAM,WAAW,GAAG,IAAI,CAAC,cAAc,EAAE,CAAC,IAAI,CAAC;QAC/C,IAAM,aAAa,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,eAAe,CAAC;QAEhE,4BAA4B;QAC5B,KAAkB,UAAoB,EAApB,KAAA,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,EAApB,cAAoB,EAApB,IAAoB,EAAE;YAAnC,IAAM,GAAG,SAAA;YACZ,IAAM,MAAM,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC;YAE5B,4CAA4C;YAC5C,IAAI,OAAO,MAAM,KAAK,QAAQ,IAAI,MAAM,KAAK,SAAS,EAAE;gBACtD,SAAS;aACV;YAED,IACE,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,mBAAmB,CAAC;gBAC7C,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,wBAAwB,CAAC,EAClD;gBACA,OAAO,OAAO,CAAC,GAAG,CAAC,CAAC;gBACpB,OAAO,OAAO,CAAC,GAAG,GAAG,UAAU,CAAC,CAAC;gBACjC,IAAM,MAAM,GAAG,aAAa,CAAC,WAAW,CAAC,CAAC,WAAW,CAAC;gBACtD,IAAI,MAAM,EAAE;oBACV,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;wBACtC,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,KAAK,GAAG,EAAE;4BAC3B,MAAM,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;4BACpB,MAAM;yBACP;qBACF;iBACF;gBACD,SAAS;aACV;SACF;IACH,CAAC;IAEO,gCAAc,GAAtB,UACE,QAAgB,EAChB,QAAgB;QAFlB,iBA0CC;QAtCC,IAAM,IAAI,GAAG,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;QACrC,OAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YACjC,IAAI,CAAC,KAAK,CAAC,UAAC,GAAQ;gBAClB,IAAI,GAAG,EAAE;oBACP,MAAM,CAAC,GAAG,CAAC,CAAC;oBACZ,OAAO;iBACR;gBAED,IAAM,YAAY,GAAG,EAAE,CAAC;gBACxB,KAAK,IAAM,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,wBAAwB;oBAClE,EAAE,EAAE;oBACJ,IACE,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,wBAAwB,CAAC,cAAc,CAC/D,GAAG,CACJ,EACD;wBACA,IAAM,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,wBAAwB,CAAC,GAAG,CAAC,CAAC;wBACpE,IAAI,GAAG,CAAC,GAAG,EAAE;4BACX,YAAY,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;yBACxB;qBACF;iBACF;gBAED,KAAI,CAAC,+BAA+B,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC;gBACzD,KAAI,CAAC,iCAAiC,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC;gBAE3D,wEAAwE;gBACxE,sEAAsE;gBACtE,qEAAqE;gBACrE,mBAAmB;gBACnB,IAAM,WAAW,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC;gBACrC,IAAI,WAAW,KAAK,QAAQ,EAAE;oBAC5B,OAAO,EAAE,CAAC;iBACX;qBAAM;oBACL,OAAO,CAAC,WAAW,CAAC,CAAC;iBACtB;YACH,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;IAEO,iDAA+B,GAAvC,UAAwC,YAAiB,EAAE,IAAS;QAClE,KAAqB,UAAY,EAAZ,6BAAY,EAAZ,0BAAY,EAAZ,IAAY,EAAE;YAA9B,IAAM,MAAM,qBAAA;YACf,IAAI,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,mBAAmB,CAAC,EAAE;gBACjD,OAAO;aACR;SACF;QACD,IAAM,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,mBAAmB,CAAC,CAAC;QAC1D,IAAI,CAAC,aAAa,CAChB,EAAE,EACF,0BAA0B,EAC1B,gCAAgC,EAChC,IAAI,EACJ;YACE,SAAS,EAAE,SAAS;YACpB,WAAW,EACT,4FAA4F;gBAC5F,+CAA+C;gBAC/C,mDAAmD;gBACnD,aAAa;gBACb,OAAO;gBACP,2BAA2B;gBAC3B,GAAG;gBACH,KAAK;gBACL,2BAA2B;gBAC3B,oBAAoB;gBACpB,iFAAiF;gBACjF,yBAAyB;gBACzB,MAAM;gBACN,yCAAyC;gBACzC,wFAAwF;gBACxF,aAAa;gBACb,OAAO;gBACP,sDAAsD;gBACtD,+CAA+C;gBAC/C,mDAAmD;gBACnD,iBAAiB;SACpB,CACF,CAAC;IACJ,CAAC;IAEO,mDAAiC,GAAzC,UACE,YAAiB,EACjB,IAAS;QAET,KAAqB,UAAY,EAAZ,6BAAY,EAAZ,0BAAY,EAAZ,IAAY,EAAE;YAA9B,IAAM,MAAM,qBAAA;YACf,IAAI,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,wBAAwB,CAAC,EAAE;gBACtD,OAAO;aACR;SACF;QACD,6CAA6C;QAC7C,kGAAkG;QAClG,IAAI,CAAC,aAAa,CAChB,EAAE,EACF,0BAA0B,EAC1B,0CAA0C,EAC1C,IAAI,EACJ;YACE,SAAS,EAAE,SAAS;YACpB,WAAW,EACT,8BAA8B;gBAC9B,2FAA2F;gBAC3F,mDAAmD;gBACnD,+CAA+C;gBAC/C,aAAa;gBACb,OAAO;gBACP,mDAAmD;gBACnD,mFAAmF;gBACnF,OAAO;gBACP,0FAA0F;gBAC1F,sEAAsE;gBACtE,oDAAoD;gBACpD,uBAAuB;gBACvB,uBAAuB;gBACvB,OAAO;gBACP,4DAA4D;gBAC5D,6FAA6F;gBAC7F,0DAA0D;gBAC1D,SAAS;gBACT,qDAAqD;gBACrD,gFAAgF;gBAChF,+BAA+B;gBAC/B,8DAA8D;gBAC9D,oCAAoC;gBACpC,wEAAwE;gBACxE,MAAM;SACT,CACF,CAAC;QACF,4CAA4C;IAC9C,CAAC;IAEO,qCAAmB,GAA3B,UAA4B,UAAe;QAA3C,iBAWC;QAVC,IAAI,EAAE,GAAG,OAAO,CAAC,OAAO,EAAE,CAAC;QAC3B,IAAM,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;QAC1C,IAAI,aAAM,CAAC,EAAE,CAAC,EAAE;YACd,OAAO,EAAE,CAAC;SACX;QACD,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC;YACX,OAAA,EAAE,CAAC,aAAa,CAAC,EAAE,EAAE,KAAI,CAAC,SAAS,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC;QAA/D,CAA+D,CAChE,CAAC;QAEF,OAAO,EAAE,CAAC;IACZ,CAAC;IACH,cAAC;AAAD,CAAC,AAxQD,CAA6B,iCAAe,GAwQ3C;AAxQY,0BAAO","sourcesContent":["import * as fs from 'fs';\nimport { Answers, prompt } from 'inquirer';\nimport * as _ from 'lodash';\nimport * as path from 'path';\nimport { Args } from '../../Constants';\nimport { exists, matchesContent, patchMatchingFile } from '../../Helper/File';\nimport { dim, green, l, nl, red } from '../../Helper/Logging';\nimport { SentryCli } from '../../Helper/SentryCli';\nimport { BaseIntegration } from './BaseIntegration';\n\nconst xcode = require('xcode');\n\nexport class Cordova extends BaseIntegration {\n  protected sentryCli: SentryCli;\n  protected folderPrefix = 'platforms';\n  protected pluginFolder = ['.'];\n\n  constructor(protected argv: Args) {\n    super(argv);\n    this.sentryCli = new SentryCli(this.argv);\n  }\n\n  public async emit(answers: Answers): Promise<Answers> {\n    if (this.argv.uninstall) {\n      return this.uninstall(answers);\n    }\n\n    const sentryCliProperties = this.sentryCli.convertAnswersToProperties(\n      answers,\n    );\n\n    await patchMatchingFile(\n      `${this.folderPrefix}/ios/*.xcodeproj/project.pbxproj`,\n      this.patchXcodeProj.bind(this),\n    );\n\n    await this.addSentryProperties(sentryCliProperties);\n    green(`Successfully set up for cordova`);\n\n    return {};\n  }\n\n  public async uninstall(answers: Answers): Promise<Answers> {\n    await patchMatchingFile(\n      '**/*.xcodeproj/project.pbxproj',\n      this.unpatchXcodeProj.bind(this),\n    );\n\n    return {};\n  }\n\n  public async shouldConfigure(answers: Answers): Promise<Answers> {\n    if (this._shouldConfigure) {\n      return this._shouldConfigure;\n    }\n\n    let result = false;\n    if (!exists(path.join('sentry.properties'))) {\n      result = true;\n      this.debug(`sentry.properties not exists`);\n    }\n\n    if (\n      !matchesContent('**/*.xcodeproj/project.pbxproj', /SENTRY_PROPERTIES/gi)\n    ) {\n      result = true;\n      this.debug('**/*.xcodeproj/project.pbxproj not matched');\n    }\n\n    if (this.argv.uninstall) {\n      // if we uninstall we need to invert the result so we remove already patched\n      result = !result;\n    }\n\n    this._shouldConfigure = Promise.resolve({ cordova: result });\n    return this.shouldConfigure;\n  }\n\n  private unpatchXcodeProj(\n    contents: string,\n    filename: string,\n  ): Promise<string> {\n    const proj = xcode.project(filename);\n    return new Promise((resolve, reject) => {\n      proj.parse((err: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n\n        this.unpatchXcodeBuildScripts(proj);\n        resolve(proj.writeSync());\n      });\n    });\n  }\n\n  private unpatchXcodeBuildScripts(proj: any): void {\n    const scripts = proj.hash.project.objects.PBXShellScriptBuildPhase || {};\n    const firstTarget = proj.getFirstTarget().uuid;\n    const nativeTargets = proj.hash.project.objects.PBXNativeTarget;\n\n    // scripts to kill entirely.\n    for (const key of Object.keys(scripts)) {\n      const script = scripts[key];\n\n      // ignore comments and keys that got deleted\n      if (typeof script === 'string' || script === undefined) {\n        continue;\n      }\n\n      if (\n        script.shellScript.match(/SENTRY_PROPERTIES/) ||\n        script.shellScript.match(/SENTRY_FRAMEWORK_PATCH/)\n      ) {\n        delete scripts[key];\n        delete scripts[key + '_comment'];\n        const phases = nativeTargets[firstTarget].buildPhases;\n        if (phases) {\n          for (let i = 0; i < phases.length; i++) {\n            if (phases[i].value === key) {\n              phases.splice(i, 1);\n              break;\n            }\n          }\n        }\n        continue;\n      }\n    }\n  }\n\n  private patchXcodeProj(\n    contents: string,\n    filename: string,\n  ): Promise<void | string> {\n    const proj = xcode.project(filename);\n    return new Promise((resolve, reject) => {\n      proj.parse((err: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n\n        const buildScripts = [];\n        for (const key in proj.hash.project.objects.PBXShellScriptBuildPhase ||\n          {}) {\n          if (\n            proj.hash.project.objects.PBXShellScriptBuildPhase.hasOwnProperty(\n              key,\n            )\n          ) {\n            const val = proj.hash.project.objects.PBXShellScriptBuildPhase[key];\n            if (val.isa) {\n              buildScripts.push(val);\n            }\n          }\n        }\n\n        this.addNewXcodeBuildPhaseForSymbols(buildScripts, proj);\n        this.addNewXcodeBuildPhaseForStripping(buildScripts, proj);\n\n        // we always modify the xcode file in memory but we only want to save it\n        // in case the user wants configuration for ios.  This is why we check\n        // here first if changes are made before we might prompt the platform\n        // continue prompt.\n        const newContents = proj.writeSync();\n        if (newContents === contents) {\n          resolve();\n        } else {\n          resolve(newContents);\n        }\n      });\n    });\n  }\n\n  private addNewXcodeBuildPhaseForSymbols(buildScripts: any, proj: any): void {\n    for (const script of buildScripts) {\n      if (script.shellScript.match(/SENTRY_PROPERTIES/)) {\n        return;\n      }\n    }\n    const cwd = path.join(process.cwd(), 'sentry.properties');\n    proj.addBuildPhase(\n      [],\n      'PBXShellScriptBuildPhase',\n      'Upload Debug Symbols to Sentry',\n      null,\n      {\n        shellPath: '/bin/sh',\n        shellScript:\n          'echo \"warning: uploading debug symbols - set SENTRY_SKIP_DSYM_UPLOAD=true to skip this\"\\\\n' +\n          'if [ -n \"$SENTRY_SKIP_DSYM_UPLOAD\" ]; then\\\\n' +\n          '  echo \"warning: skipping debug symbol upload\"\\\\n' +\n          '  exit 0\\\\n' +\n          'fi\\\\n' +\n          'export SENTRY_PROPERTIES=' +\n          cwd +\n          '\\\\n' +\n          'function getProperty {\\\\n' +\n          '    PROP_KEY=$1\\\\n' +\n          '    PROP_VALUE=`cat $SENTRY_PROPERTIES | grep \"$PROP_KEY\" | cut -d\\'=\\' -f2`\\\\n' +\n          '    echo $PROP_VALUE\\\\n' +\n          '}\\\\n' +\n          'if [ ! -f $SENTRY_PROPERTIES ]; then\\\\n' +\n          '  echo \"warning: SENTRY: sentry.properties file not found! Skipping symbol upload.\"\\\\n' +\n          '  exit 0\\\\n' +\n          'fi\\\\n' +\n          'echo \"# Reading property from $SENTRY_PROPERTIES\"\\\\n' +\n          'SENTRY_CLI=$(getProperty \"cli.executable\")\\\\n' +\n          'SENTRY_COMMAND=\"../../$SENTRY_CLI upload-dsym\"\\\\n' +\n          '$SENTRY_COMMAND',\n      },\n    );\n  }\n\n  private addNewXcodeBuildPhaseForStripping(\n    buildScripts: any,\n    proj: any,\n  ): void {\n    for (const script of buildScripts) {\n      if (script.shellScript.match(/SENTRY_FRAMEWORK_PATCH/)) {\n        return;\n      }\n    }\n    // tslint:disable:no-invalid-template-strings\n    // http://ikennd.ac/blog/2015/02/stripping-unwanted-architectures-from-dynamic-libraries-in-xcode/\n    proj.addBuildPhase(\n      [],\n      'PBXShellScriptBuildPhase',\n      'Sentry strip unused archs from Framework',\n      null,\n      {\n        shellPath: '/bin/sh',\n        shellScript:\n          '# SENTRY_FRAMEWORK_PATCH \\\\n' +\n          'echo \"warning: patching framework - set SENTRY_SKIP_FRAMEWORK_PATCH=true to skip this\"\\\\n' +\n          'if [ -n \"$SENTRY_SKIP_FRAMEWORK_PATCH\" ]; then\\\\n' +\n          '  echo \"warning: skipping framework patch\"\\\\n' +\n          '  exit 0\\\\n' +\n          'fi\\\\n' +\n          'APP_PATH=\"${TARGET_BUILD_DIR}/${WRAPPER_NAME}\"\\\\n' +\n          'find \"$APP_PATH\" -name \\'Sentry*.framework\\' -type d | while read -r FRAMEWORK\\\\n' +\n          'do\\\\n' +\n          'FRAMEWORK_EXECUTABLE_NAME=$(defaults read \"$FRAMEWORK/Info.plist\" CFBundleExecutable)\\\\n' +\n          'FRAMEWORK_EXECUTABLE_PATH=\"$FRAMEWORK/$FRAMEWORK_EXECUTABLE_NAME\"\\\\n' +\n          'echo \"Executable is $FRAMEWORK_EXECUTABLE_PATH\"\\\\n' +\n          'EXTRACTED_ARCHS=()\\\\n' +\n          'for ARCH in $ARCHS\\\\n' +\n          'do\\\\n' +\n          'echo \"Extracting $ARCH from $FRAMEWORK_EXECUTABLE_NAME\"\\\\n' +\n          'lipo -extract \"$ARCH\" \"$FRAMEWORK_EXECUTABLE_PATH\" -o \"$FRAMEWORK_EXECUTABLE_PATH-$ARCH\"\\\\n' +\n          'EXTRACTED_ARCHS+=(\"$FRAMEWORK_EXECUTABLE_PATH-$ARCH\")\\\\n' +\n          'done\\\\n' +\n          'echo \"Merging extracted architectures: ${ARCHS}\"\\\\n' +\n          'lipo -o \"$FRAMEWORK_EXECUTABLE_PATH-merged\" -create \"${EXTRACTED_ARCHS[@]}\"\\\\n' +\n          'rm \"${EXTRACTED_ARCHS[@]}\"\\\\n' +\n          'echo \"Replacing original executable with thinned version\"\\\\n' +\n          'rm \"$FRAMEWORK_EXECUTABLE_PATH\"\\\\n' +\n          'mv \"$FRAMEWORK_EXECUTABLE_PATH-merged\" \"$FRAMEWORK_EXECUTABLE_PATH\"\\\\n' +\n          'done',\n      },\n    );\n    // tslint:enable:no-invalid-template-strings\n  }\n\n  private addSentryProperties(properties: any): Promise<void> {\n    let rv = Promise.resolve();\n    const fn = path.join('sentry.properties');\n    if (exists(fn)) {\n      return rv;\n    }\n    rv = rv.then(() =>\n      fs.writeFileSync(fn, this.sentryCli.dumpProperties(properties)),\n    );\n\n    return rv;\n  }\n}\n"]}