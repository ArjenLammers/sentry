{"version":3,"file":"ReactNative.js","sourceRoot":"","sources":["../../../../lib/Steps/Integrations/ReactNative.ts"],"names":[],"mappings":"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","sourcesContent":["import * as fs from 'fs';\nimport { Answers, prompt, Question } from 'inquirer';\nimport * as _ from 'lodash';\nimport * as path from 'path';\nimport { Args, Platform } from '../../Constants';\nimport { exists, matchesContent, patchMatchingFile } from '../../Helper/File';\nimport { dim, green, red } from '../../Helper/Logging';\nimport { SentryCli } from '../../Helper/SentryCli';\nimport { MobileProject } from './MobileProject';\n\nconst xcode = require('xcode');\n\nexport class ReactNative extends MobileProject {\n  protected answers: Answers;\n  protected sentryCli: SentryCli;\n\n  constructor(protected argv: Args) {\n    super(argv);\n    this.sentryCli = new SentryCli(this.argv);\n  }\n\n  public async emit(answers: Answers): Promise<Answers> {\n    if (this.argv.uninstall) {\n      return this.uninstall(answers);\n    }\n    if (!(await this.shouldEmit(answers))) {\n      return {};\n    }\n\n    const sentryCliProperties = this.sentryCli.convertAnswersToProperties(\n      answers,\n    );\n\n    return new Promise(async (resolve, reject) => {\n      const promises = this.getPlatforms(answers).map(\n        async (platform: string) => {\n          try {\n            if (platform === 'ios') {\n              await patchMatchingFile(\n                'ios/*.xcodeproj/project.pbxproj',\n                this.patchXcodeProj.bind(this),\n              );\n              dim(`✅ Patched build script in Xcode project.`);\n            } else {\n              await patchMatchingFile(\n                '**/app/build.gradle',\n                this.patchBuildGradle.bind(this),\n              );\n              dim(`✅ Patched build.gradle file.`);\n            }\n            await patchMatchingFile(\n              `index.${platform}.js`,\n              this.patchJs.bind(this),\n              answers,\n              platform,\n            );\n            // rm 0.49 introduced an App.js for both platforms\n            await patchMatchingFile(\n              'App.js',\n              this.patchJs.bind(this),\n              answers,\n              platform,\n            );\n            dim(`✅ Patched App.js file.`);\n            await this.addSentryProperties(platform, sentryCliProperties);\n            dim(`✅ Added sentry.properties file to ${platform}`);\n\n            green(`Successfully set up ${platform} for react-native`);\n          } catch (e) {\n            red(e);\n          }\n        },\n      );\n      Promise.all(promises)\n        .then(resolve)\n        .catch(reject);\n    });\n  }\n\n  public async uninstall(answers: Answers): Promise<Answers> {\n    await patchMatchingFile(\n      '**/*.xcodeproj/project.pbxproj',\n      this.unpatchXcodeProj.bind(this),\n    );\n    await patchMatchingFile(\n      '**/app/build.gradle',\n      this.unpatchBuildGradle.bind(this),\n    );\n    return {};\n  }\n\n  protected async shouldConfigurePlatform(platform: string): Promise<boolean> {\n    let result = false;\n\n    if (!exists(`${platform}/sentry.properties`)) {\n      result = true;\n      this.debug(`${platform}/sentry.properties not exists`);\n    }\n\n    if (!matchesContent('**/*.xcodeproj/project.pbxproj', /sentry-cli/gi)) {\n      result = true;\n      this.debug('**/*.xcodeproj/project.pbxproj not matched');\n    }\n\n    if (!matchesContent('**/app/build.gradle', /sentry\\.gradle/gi)) {\n      result = true;\n      this.debug('**/app/build.gradle not matched');\n    }\n\n    const regex = /Sentry/gi;\n    if (\n      exists(`index.${platform}.js`) &&\n      !matchesContent(`index.${platform}.js`, regex)\n    ) {\n      result = true;\n      this.debug(`index.${platform}.js not matched`);\n    }\n    if (exists('App.js') && !matchesContent('App.js', regex)) {\n      result = true;\n      this.debug('index.js or App.js not matched');\n    }\n\n    if (this.argv.uninstall) {\n      // if we uninstall we need to invert the result so we remove already patched\n      // but leave untouched platforms as they are\n      return !result;\n    }\n\n    return result;\n  }\n\n  private addSentryProperties(\n    platform: string,\n    properties: any,\n  ): Promise<void> {\n    let rv = Promise.resolve();\n\n    // This will create the ios/android folder before trying to write\n    // sentry.properties in it which would fail otherwise\n    if (!fs.existsSync(platform)) {\n      dim(`${platform} folder did not exist, creating it.`);\n      fs.mkdirSync(platform);\n    }\n    const fn = path.join(platform, 'sentry.properties');\n\n    if (platform === 'android' && properties['cli/executable']) {\n      // We don't need to write the sentry-cli path in the properties file\n      // since our gradle plugins already pick it up on the correct spot\n      delete properties['cli/executable'];\n    }\n    rv = rv.then(() =>\n      fs.writeFileSync(fn, this.sentryCli.dumpProperties(properties)),\n    );\n\n    return rv;\n  }\n\n  private patchJs(\n    contents: string,\n    filename: string,\n    answers: Answers,\n    platform?: string,\n  ): Promise<string | null> {\n    // since the init call could live in other places too, we really only\n    // want to do this if we managed to patch any of the other files as well.\n    if (contents.match(/Sentry.config\\(/)) {\n      return Promise.resolve(null);\n    }\n\n    // if we match @sentry\\/react-native somewhere, we already patched the file\n    // and no longer need to\n    if (contents.match('@sentry/react-native')) {\n      return Promise.resolve(contents);\n    }\n\n    let dsn = '__DSN__';\n    this.getPlatforms(answers).forEach((selectedPlatform: string) => {\n      if (platform && selectedPlatform === platform) {\n        dsn = _.get(answers, 'config.dsn.public', null);\n      } else if (platform === undefined) {\n        dsn = _.get(answers, 'config.dsn.public', null);\n      }\n    });\n\n    return Promise.resolve(\n      contents.replace(\n        /^([^]*)(import\\s+[^;]*?;$)/m,\n        match =>\n          match +\n          \"\\n\\nimport * as Sentry from '@sentry/react-native';\\n\\n\" +\n          `Sentry.init({ \\n` +\n          `  dsn: '${dsn}', \\n` +\n          `});\\n`,\n      ),\n    );\n  }\n\n  // ANDROID -----------------------------------------\n\n  private patchBuildGradle(contents: string): Promise<string | null> {\n    const applyFrom =\n      'apply from: \"../../node_modules/@sentry/react-native/sentry.gradle\"';\n    if (contents.indexOf(applyFrom) >= 0) {\n      return Promise.resolve(null);\n    }\n    return Promise.resolve(\n      contents.replace(\n        /^apply from: \"..\\/..\\/node_modules\\/react-native\\/react.gradle\"/m,\n        match => match + '\\n' + applyFrom,\n      ),\n    );\n  }\n\n  private unpatchBuildGradle(contents: string): Promise<string> {\n    return Promise.resolve(\n      contents.replace(\n        /^\\s*apply from: [\"']..\\/..\\/node_modules\\/@sentry\\/react-native\\/sentry.gradle[\"'];?\\s*?\\r?\\n/m,\n        '',\n      ),\n    );\n  }\n\n  // IOS -----------------------------------------\n\n  private patchExistingXcodeBuildScripts(buildScripts: any): void {\n    for (const script of buildScripts) {\n      if (\n        !script.shellScript.match(\n          /(packager|scripts)\\/react-native-xcode\\.sh\\b/,\n        ) ||\n        script.shellScript.match(/sentry-cli\\s+react-native[\\s-]xcode/)\n      ) {\n        continue;\n      }\n      let code = JSON.parse(script.shellScript);\n      code =\n        'export SENTRY_PROPERTIES=sentry.properties\\n' +\n        'export EXTRA_PACKAGER_ARGS=\"--sourcemap-output $DERIVED_FILE_DIR/main.jsbundle.map\"\\n' +\n        code.replace(\n          /^.*?\\/(packager|scripts)\\/react-native-xcode\\.sh\\s*/m,\n          (match: any) =>\n            `../node_modules/@sentry/cli/bin/sentry-cli react-native xcode ${match}`,\n        );\n      script.shellScript = JSON.stringify(code);\n    }\n  }\n\n  private addNewXcodeBuildPhaseForSymbols(buildScripts: any, proj: any): void {\n    for (const script of buildScripts) {\n      if (script.shellScript.match(/sentry-cli\\s+upload-dsym/)) {\n        return;\n      }\n    }\n\n    proj.addBuildPhase(\n      [],\n      'PBXShellScriptBuildPhase',\n      'Upload Debug Symbols to Sentry',\n      null,\n      {\n        shellPath: '/bin/sh',\n        shellScript:\n          'export SENTRY_PROPERTIES=sentry.properties\\\\n' +\n          '../node_modules/@sentry/cli/bin/sentry-cli upload-dsym',\n      },\n    );\n  }\n\n  private patchXcodeProj(contents: string, filename: string): Promise<string> {\n    const proj = xcode.project(filename);\n    return new Promise((resolve, reject) => {\n      proj.parse((err: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n\n        const buildScripts = [];\n        for (const key in proj.hash.project.objects.PBXShellScriptBuildPhase ||\n          {}) {\n          if (\n            proj.hash.project.objects.PBXShellScriptBuildPhase.hasOwnProperty(\n              key,\n            )\n          ) {\n            const val = proj.hash.project.objects.PBXShellScriptBuildPhase[key];\n            if (val.isa) {\n              buildScripts.push(val);\n            }\n          }\n        }\n\n        try {\n          this.patchExistingXcodeBuildScripts(buildScripts);\n        } catch (e) {\n          red(e);\n        }\n        try {\n          this.addNewXcodeBuildPhaseForSymbols(buildScripts, proj);\n        } catch (e) {\n          red(e);\n        }\n\n        // we always modify the xcode file in memory but we only want to save it\n        // in case the user wants configuration for ios.  This is why we check\n        // here first if changes are made before we might prompt the platform\n        // continue prompt.\n        const newContents = proj.writeSync();\n        if (newContents === contents) {\n          resolve();\n        } else {\n          resolve(newContents);\n        }\n      });\n    });\n  }\n\n  private unpatchXcodeBuildScripts(proj: any): void {\n    const scripts = proj.hash.project.objects.PBXShellScriptBuildPhase || {};\n    const firstTarget = proj.getFirstTarget().uuid;\n    const nativeTargets = proj.hash.project.objects.PBXNativeTarget;\n\n    // scripts to patch partially.  Run this first so that we don't\n    // accidentally delete some scripts later entirely that we only want to\n    // rewrite.\n    for (const key of Object.keys(scripts)) {\n      const script = scripts[key];\n\n      // ignore comments\n      if (typeof script === 'string') {\n        continue;\n      }\n\n      // ignore scripts that do not invoke the react-native-xcode command.\n      if (!script.shellScript.match(/sentry-cli\\s+react-native[\\s-]xcode\\b/)) {\n        continue;\n      }\n\n      script.shellScript = JSON.stringify(\n        JSON.parse(script.shellScript)\n          // \"legacy\" location for this.  This is what happens if users followed\n          // the old documentation for where to add the bundle command\n          .replace(\n            /^..\\/node_modules\\/@sentry\\/react-native\\/bin\\/bundle-frameworks\\s*?\\r\\n?/m,\n            '',\n          )\n          // legacy location for dsym upload\n          .replace(\n            /^..\\/node_modules\\/@sentry\\/cli\\/bin\\/sentry-cli upload-dsym\\s*?\\r?\\n/m,\n            '',\n          )\n          // remove sentry properties export\n          .replace(/^export SENTRY_PROPERTIES=sentry.properties\\r?\\n/m, '')\n          // unwrap react-native-xcode.sh command.  In case someone replaced it\n          // entirely with the sentry-cli command we need to put the original\n          // version back in.\n          .replace(\n            /^(?:..\\/node_modules\\/@sentry\\/cli\\/bin\\/)?sentry-cli\\s+react-native[\\s-]xcode(\\s+.*?)$/m,\n            (match: any, m1: string) => {\n              const rv = m1.trim();\n              if (rv === '') {\n                return '../node_modules/react-native/scripts/react-native-xcode.sh';\n              } else {\n                return rv;\n              }\n            },\n          ),\n      );\n    }\n\n    // scripts to kill entirely.\n    for (const key of Object.keys(scripts)) {\n      const script = scripts[key];\n\n      // ignore comments and keys that got deleted\n      if (typeof script === 'string' || script === undefined) {\n        continue;\n      }\n\n      if (\n        script.shellScript.match(\n          /@sentry\\/react-native\\/bin\\/bundle-frameworks\\b/,\n        ) ||\n        script.shellScript.match(\n          /@sentry\\/cli\\/bin\\/sentry-cli\\s+upload-dsym\\b/,\n        )\n      ) {\n        delete scripts[key];\n        delete scripts[key + '_comment'];\n        const phases = nativeTargets[firstTarget].buildPhases;\n        if (phases) {\n          for (let i = 0; i < phases.length; i++) {\n            if (phases[i].value === key) {\n              phases.splice(i, 1);\n              break;\n            }\n          }\n        }\n        continue;\n      }\n    }\n  }\n\n  private unpatchXcodeProj(\n    contents: string,\n    filename: string,\n  ): Promise<string> {\n    const proj = xcode.project(filename);\n    return new Promise((resolve, reject) => {\n      proj.parse((err: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n\n        this.unpatchXcodeBuildScripts(proj);\n        resolve(proj.writeSync());\n      });\n    });\n  }\n}\n"]}