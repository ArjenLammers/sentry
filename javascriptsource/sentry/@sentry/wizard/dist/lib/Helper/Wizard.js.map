{"version":3,"file":"Wizard.js","sourceRoot":"","sources":["../../../lib/Helper/Wizard.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,0BAA4B;AAC5B,0CAA8D;AAG9D,yCAAwC;AACxC,qCAAgD;AAEhD,SAAS,uBAAuB,CAAC,IAAU;IACzC,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE;QACb,IAAI,CAAC,GAAG,GAAG,uBAAW,CAAC;QACvB,aAAG,CAAC,kCAAgC,IAAI,CAAC,GAAK,CAAC,CAAC;KACjD;IACD,IAAI,IAAI,CAAC,KAAK,KAAK,SAAS,EAAE;QAC5B,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;QAClB,aAAG,CAAC,kCAAkC,CAAC,CAAC;KACzC;IACD,IAAI,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC;IACvB,OAAO,IAAI,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC;IAC5C,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC,YAAY,EAAE,KAAK,CAAC,CAAC;IAC/C,IAAI,CAAC,GAAG,GAAG,OAAO,CAAC;IACnB,aAAa;IACb,IAAI,IAAI,CAAC,cAAc,CAAC,EAAE;QACxB,aAAa;QACb,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,cAAc,CAAC,CAAC;QACxC,aAAa;QACb,OAAO,IAAI,CAAC,cAAc,CAAC,CAAC;KAC7B;AACH,CAAC;AAED,SAAgB,qBAAqB,CAAC,OAAgB;IACpD,OAAO,CAAC,CAAC,GAAG,CAAC,OAAO,EAAE,aAAa,CAAoB,CAAC;AAC1D,CAAC;AAFD,sDAEC;AAED,SAAsB,WAAW,CAC/B,IAAU;IACV,eAAyC;SAAzC,UAAyC,EAAzC,qBAAyC,EAAzC,IAAyC;QAAzC,8BAAyC;;;;;;;;;oBAGvC,uBAAuB,CAAC,IAAI,CAAC,CAAC;oBAC9B,IAAI,IAAI,CAAC,KAAK,EAAE;wBACd,eAAK,CAAC,IAAI,CAAC,CAAC;qBACb;oBACD,IAAI,IAAI,CAAC,KAAK,EAAE;wBACd,aAAG,CAAC,4CAA4C,CAAC,CAAC;qBACnD;oBACM,qBAAM,KAAK;6BACf,GAAG,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,IAAI,CAAC,IAAI,CAAC,EAAd,CAAc,CAAC;6BAC3B,MAAM,CAAC,UAAO,MAAM,EAAE,IAAI;;;;4CACN,qBAAM,MAAM,EAAA;;wCAAzB,UAAU,GAAG,SAAY;wCACf,qBAAM,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,EAAA;;wCAArC,OAAO,GAAG,SAA2B;wCAC3C,mCAAY,UAAU,EAAK,OAAO,GAAG;;;6BACtC,EAAE,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,EAAA;wBANzB,sBAAO,SAMkB,EAAC;;;oBAE1B,qBAAS,CAAC,IAAI,EAAE,CAAC;oBACjB,YAAE,EAAE,CAAC;oBACL,aAAG,CAAC,4BAA4B,CAAC,CAAC;oBAClC,aAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,GAAC,CAAC,CAAC,CAAC,GAAC,CAAC,OAAO,CAAC,CAAC;oBAChC,YAAE,EAAE,CAAC;oBACL,aAAG,CAAC,2CAA2C,CAAC,CAAC;oBACjD,aAAG,CAAC,mCAAmC,CAAC,CAAC;oBACzC,sBAAO,EAAE,EAAC;;;;;CAEb;AA7BD,kCA6BC","sourcesContent":["import { Answers, ui } from 'inquirer';\nimport * as _ from 'lodash';\nimport { Args, DEFAULT_URL, Integration } from '../Constants';\nimport { BaseStep, IStep } from '../Steps/BaseStep';\nimport { BaseIntegration } from '../Steps/Integrations/BaseIntegration';\nimport { BottomBar } from './BottomBar';\nimport { debug, dim, nl, red } from './Logging';\n\nfunction sanitizeAndValidateArgs(argv: Args): void {\n  if (!argv.url) {\n    argv.url = DEFAULT_URL;\n    dim(`no URL provided, fallback to ${argv.url}`);\n  }\n  if (argv.quiet === undefined) {\n    argv.quiet = true;\n    dim('will activate quiet mode for you');\n  }\n  let baseUrl = argv.url;\n  baseUrl += baseUrl.endsWith('/') ? '' : '/';\n  baseUrl = baseUrl.replace(/:\\/(?!\\/)/g, '://');\n  argv.url = baseUrl;\n  // @ts-ignore\n  if (argv['skip-connect']) {\n    // @ts-ignore\n    argv.skipConnect = argv['skip-connect'];\n    // @ts-ignore\n    delete argv['skip-connect'];\n  }\n}\n\nexport function getCurrentIntegration(answers: Answers): BaseIntegration {\n  return _.get(answers, 'integration') as BaseIntegration;\n}\n\nexport async function startWizard<M extends IStep>(\n  argv: Args,\n  ...steps: Array<{ new (debug: Args): M }>\n): Promise<Answers> {\n  try {\n    sanitizeAndValidateArgs(argv);\n    if (argv.debug) {\n      debug(argv);\n    }\n    if (argv.quiet) {\n      dim(\"Quiet mode On, DAMA, don't ask me anything\");\n    }\n    return await steps\n      .map(step => new step(argv))\n      .reduce(async (answer, step) => {\n        const prevAnswer = await answer;\n        const answers = await step.emit(prevAnswer);\n        return { ...prevAnswer, ...answers };\n      }, Promise.resolve({}));\n  } catch (e) {\n    BottomBar.hide();\n    nl();\n    red('Sentry Wizard failed with:');\n    red(argv.debug ? e : e.message);\n    nl();\n    red('Protip: Add --debug to see whats going on');\n    red('OR use --help to see your options');\n    return {};\n  }\n}\n"]}