{"version":3,"file":"SentryCli.js","sourceRoot":"","sources":["../../../lib/Helper/SentryCli.ts"],"names":[],"mappings":";;AACA,0BAA4B;AAC5B,2BAA6B;AAO7B;IAGE,mBAAsB,IAAU;QAAV,SAAI,GAAJ,IAAI,CAAM;QAFxB,YAAO,GAAG,OAAO,CAAC,OAAO,CAAC;IAEC,CAAC;IAE7B,sCAAkB,GAAzB,UAA0B,OAAiC;QACzD,IAAI,CAAC,OAAO,GAAG,OAAc,CAAC;IAChC,CAAC;IAEM,8CAA0B,GAAjC,UAAkC,OAAgB;QAChD,IAAM,KAAK,GAAmB,EAAE,CAAC;QACjC,KAAK,CAAC,cAAc,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC;QACtC,KAAK,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,OAAO,EAAE,0BAA0B,EAAE,IAAI,CAAC,CAAC;QACzE,KAAK,CAAC,kBAAkB,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,OAAO,EAAE,qBAAqB,EAAE,IAAI,CAAC,CAAC;QACxE,KAAK,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,OAAO,EAAE,mBAAmB,EAAE,IAAI,CAAC,CAAC;QAChE,IAAI;YACF,IAAM,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,4BAA4B,CAAC,CAAC;YAC3D,KAAK,CAAC,gBAAgB,CAAC,GAAG,IAAI;iBAC3B,QAAQ,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,OAAO,CAAC;iBAChC,OAAO,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;SAC3B;QAAC,OAAO,CAAC,EAAE;YACV,6CAA6C;SAC9C;QACD,OAAO,KAAK,CAAC;IACf,CAAC;IAEM,kCAAc,GAArB,UAAsB,KAAqB;QACzC,IAAM,EAAE,GAAG,EAAE,CAAC;QACd,KAAK,IAAI,GAAG,IAAI,KAAK,EAAE;YACrB,IAAI,KAAK,CAAC,cAAc,CAAC,GAAG,CAAC,EAAE;gBAC7B,IAAM,KAAK,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC;gBACzB,GAAG,GAAG,GAAG,CAAC,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;gBAC9B,IAAI,KAAK,KAAK,SAAS,IAAI,KAAK,KAAK,IAAI,EAAE;oBACzC,EAAE,CAAC,IAAI,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;iBAC1B;qBAAM;oBACL,EAAE,CAAC,IAAI,CAAC,GAAG,GAAG,GAAG,GAAG,KAAK,CAAC,CAAC;iBAC5B;aACF;SACF;QACD,OAAO,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC;IAC9B,CAAC;IACH,gBAAC;AAAD,CAAC,AAzCD,IAyCC;AAzCY,8BAAS","sourcesContent":["import { Answers } from 'inquirer';\nimport * as _ from 'lodash';\nimport * as path from 'path';\nimport { Args } from '../Constants';\n\nexport interface SentryCliProps {\n  [s: string]: string;\n}\n\nexport class SentryCli {\n  private resolve = require.resolve;\n\n  constructor(protected argv: Args) {}\n\n  public setResolveFunction(resolve: (path: string) => string): void {\n    this.resolve = resolve as any;\n  }\n\n  public convertAnswersToProperties(answers: Answers): SentryCliProps {\n    const props: SentryCliProps = {};\n    props['defaults/url'] = this.argv.url;\n    props['defaults/org'] = _.get(answers, 'config.organization.slug', null);\n    props['defaults/project'] = _.get(answers, 'config.project.slug', null);\n    props['auth/token'] = _.get(answers, 'config.auth.token', null);\n    try {\n      const cliPath = this.resolve('@sentry/cli/bin/sentry-cli');\n      props['cli/executable'] = path\n        .relative(process.cwd(), cliPath)\n        .replace(/\\\\/g, '\\\\\\\\');\n    } catch (e) {\n      // we do nothing and leave everyting as it is\n    }\n    return props;\n  }\n\n  public dumpProperties(props: SentryCliProps): string {\n    const rv = [];\n    for (let key in props) {\n      if (props.hasOwnProperty(key)) {\n        const value = props[key];\n        key = key.replace(/\\//g, '.');\n        if (value === undefined || value === null) {\n          rv.push('#' + key + '=');\n        } else {\n          rv.push(key + '=' + value);\n        }\n      }\n    }\n    return rv.join('\\n') + '\\n';\n  }\n}\n"]}