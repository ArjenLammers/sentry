{"version":3,"file":"reportingobserver.js","sourceRoot":"","sources":["../src/reportingobserver.ts"],"names":[],"mappings":";AAEA,OAAO,EAAE,eAAe,EAAE,yBAAyB,EAAE,MAAM,eAAe,CAAC;AAU3E,YAAY;AACZ,IAAK,WAOJ;AAPD,WAAK,WAAW;IACd,YAAY;IACZ,8BAAe,CAAA;IACf,YAAY;IACZ,0CAA2B,CAAA;IAC3B,YAAY;IACZ,4CAA6B,CAAA;AAC/B,CAAC,EAPI,WAAW,KAAX,WAAW,QAOf;AAiCD,mEAAmE;AACnE;IAgBE;;OAEG;IACH,2BACmB,QAIhB;QAJgB,yBAAA,EAAA;YAGf,KAAK,EAAE,CAAC,WAAW,CAAC,KAAK,EAAE,WAAW,CAAC,WAAW,EAAE,WAAW,CAAC,YAAY,CAAC;SAC9E;QAJgB,aAAQ,GAAR,QAAQ,CAIxB;QAlBH;;WAEG;QACa,SAAI,GAAW,iBAAiB,CAAC,EAAE,CAAC;IAgBjD,CAAC;IAEJ;;OAEG;IACI,qCAAS,GAAhB,UAAiB,CAAqC,EAAE,aAAwB;QAC9E,IAAI,CAAC,yBAAyB,EAAE,EAAE;YAChC,OAAO;SACR;QAED,IAAI,CAAC,cAAc,GAAG,aAAa,CAAC;QAEpC,sEAAsE;QACtE,IAAM,QAAQ,GAAG,IAAI,CAAC,eAAe,EAAO,CAAC,iBAAiB,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;YACvF,QAAQ,EAAE,IAAI;YACd,KAAK,EAAE,IAAI,CAAC,QAAQ,CAAC,KAAK;SAC3B,CAAC,CAAC;QAEH,sEAAsE;QACtE,QAAQ,CAAC,OAAO,EAAE,CAAC;IACrB,CAAC;IAED;;OAEG;IACI,mCAAO,GAAd,UAAe,OAAiB;;QAC9B,IAAM,GAAG,GAAG,IAAI,CAAC,cAAc,IAAI,IAAI,CAAC,cAAc,EAAE,CAAC;QACzD,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,cAAc,CAAC,iBAAiB,CAAC,EAAE;YAClD,OAAO;SACR;gCACU,MAAM;YACf,GAAG,CAAC,SAAS,CAAC,UAAA,KAAK;gBACjB,KAAK,CAAC,QAAQ,CAAC,KAAK,EAAE,MAAM,CAAC,GAAG,CAAC,CAAC;gBAElC,IAAM,KAAK,GAAG,wBAAsB,MAAM,CAAC,IAAI,MAAG,CAAC;gBACnD,IAAI,OAAO,GAAG,sBAAsB,CAAC;gBAErC,IAAI,MAAM,CAAC,IAAI,EAAE;oBACf,0EAA0E;oBAC1E,IAAM,SAAS,GAEX,EAAE,CAAC;oBAEP,wCAAwC;oBACxC,KAAK,IAAM,IAAI,IAAI,MAAM,CAAC,IAAI,EAAE;wBAC9B,SAAS,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;qBACrC;oBAED,KAAK,CAAC,QAAQ,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;oBAElC,IAAI,MAAM,CAAC,IAAI,KAAK,WAAW,CAAC,KAAK,EAAE;wBACrC,IAAM,IAAI,GAAG,MAAM,CAAC,IAAuB,CAAC;wBAC5C,+EAA+E;wBAC/E,OAAO,GAAG,CAAC,IAAI,CAAC,OAAO,IAAI,EAAE,EAAE,IAAI,CAAC,MAAM,IAAI,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,IAAI,OAAO,CAAC;qBAC/E;yBAAM;wBACL,IAAM,IAAI,GAAG,MAAM,CAAC,IAAsD,CAAC;wBAC3E,OAAO,GAAG,IAAI,CAAC,OAAO,IAAI,OAAO,CAAC;qBACnC;iBACF;gBAED,GAAG,CAAC,cAAc,CAAI,KAAK,UAAK,OAAS,CAAC,CAAC;YAC7C,CAAC,CAAC,CAAC;;;YA/BL,KAAqB,IAAA,YAAA,SAAA,OAAO,CAAA,gCAAA;gBAAvB,IAAM,MAAM,oBAAA;wBAAN,MAAM;aAgChB;;;;;;;;;IACH,CAAC;IAvFD;;OAEG;IACW,oBAAE,GAAW,mBAAmB,CAAC;IAqFjD,wBAAC;CAAA,AAzFD,IAyFC;SAzFY,iBAAiB","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { EventProcessor, Hub, Integration } from '@sentry/types';\nimport { getGlobalObject, supportsReportingObserver } from '@sentry/utils';\n\n/** JSDoc */\ninterface Report {\n  [key: string]: any;\n  type: ReportTypes;\n  url: string;\n  body?: ReportBody;\n}\n\n/** JSDoc */\nenum ReportTypes {\n  /** JSDoc */\n  Crash = 'crash',\n  /** JSDoc */\n  Deprecation = 'deprecation',\n  /** JSDoc */\n  Intervention = 'intervention',\n}\n\n/** JSDoc */\ntype ReportBody = CrashReportBody | DeprecationReportBody | InterventionReportBody;\n\n/** JSDoc */\ninterface CrashReportBody {\n  [key: string]: any;\n  crashId: string;\n  reason?: string;\n}\n\n/** JSDoc */\ninterface DeprecationReportBody {\n  [key: string]: any;\n  id: string;\n  anticipatedRemoval?: Date;\n  message: string;\n  sourceFile?: string;\n  lineNumber?: number;\n  columnNumber?: number;\n}\n\n/** JSDoc */\ninterface InterventionReportBody {\n  [key: string]: any;\n  id: string;\n  message: string;\n  sourceFile?: string;\n  lineNumber?: number;\n  columnNumber?: number;\n}\n\n/** Reporting API integration - https://w3c.github.io/reporting/ */\nexport class ReportingObserver implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'ReportingObserver';\n\n  /**\n   * @inheritDoc\n   */\n  public readonly name: string = ReportingObserver.id;\n\n  /**\n   * Returns current hub.\n   */\n  private _getCurrentHub?: () => Hub;\n\n  /**\n   * @inheritDoc\n   */\n  public constructor(\n    private readonly _options: {\n      types?: ReportTypes[];\n    } = {\n      types: [ReportTypes.Crash, ReportTypes.Deprecation, ReportTypes.Intervention],\n    },\n  ) {}\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(_: (callback: EventProcessor) => void, getCurrentHub: () => Hub): void {\n    if (!supportsReportingObserver()) {\n      return;\n    }\n\n    this._getCurrentHub = getCurrentHub;\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    const observer = new (getGlobalObject<any>().ReportingObserver)(this.handler.bind(this), {\n      buffered: true,\n      types: this._options.types,\n    });\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    observer.observe();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public handler(reports: Report[]): void {\n    const hub = this._getCurrentHub && this._getCurrentHub();\n    if (!hub || !hub.getIntegration(ReportingObserver)) {\n      return;\n    }\n    for (const report of reports) {\n      hub.withScope(scope => {\n        scope.setExtra('url', report.url);\n\n        const label = `ReportingObserver [${report.type}]`;\n        let details = 'No details available';\n\n        if (report.body) {\n          // Object.keys doesn't work on ReportBody, as all properties are inheirted\n          const plainBody: {\n            [key: string]: any;\n          } = {};\n\n          // eslint-disable-next-line guard-for-in\n          for (const prop in report.body) {\n            plainBody[prop] = report.body[prop];\n          }\n\n          scope.setExtra('body', plainBody);\n\n          if (report.type === ReportTypes.Crash) {\n            const body = report.body as CrashReportBody;\n            // A fancy way to create a message out of crashId OR reason OR both OR fallback\n            details = [body.crashId || '', body.reason || ''].join(' ').trim() || details;\n          } else {\n            const body = report.body as DeprecationReportBody | InterventionReportBody;\n            details = body.message || details;\n          }\n        }\n\n        hub.captureMessage(`${label}: ${details}`);\n      });\n    }\n  }\n}\n"]}