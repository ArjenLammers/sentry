{"version":3,"file":"ember.js","sourceRoot":"","sources":["../src/ember.ts"],"names":[],"mappings":";AACA,uCAAsE;AAEtE,YAAY;AACZ;IAiBE;;OAEG;IACH,8DAA8D;IAC9D,eAAmB,OAA6B;QAA7B,wBAAA,EAAA,YAA6B;QAfhD;;WAEG;QACI,SAAI,GAAW,KAAK,CAAC,EAAE,CAAC;QAa7B,0GAA0G;QAC1G,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC,KAAK,IAAI,uBAAe,EAAO,CAAC,KAAK,CAAC;IAC9D,CAAC;IAED;;OAEG;IACI,yBAAS,GAAhB,UAAiB,CAAqC,EAAE,aAAwB;QAAhF,iBAmCC;QAlCC,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;YAChB,cAAM,CAAC,KAAK,CAAC,+CAA+C,CAAC,CAAC;YAC9D,OAAO;SACR;QAED,+DAA+D;QAC/D,IAAM,UAAU,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC;QAEvC,IAAI,CAAC,MAAM,CAAC,OAAO,GAAG,UAAC,KAAY;YACjC,IAAI,aAAa,EAAE,CAAC,cAAc,CAAC,KAAK,CAAC,EAAE;gBACzC,aAAa,EAAE,CAAC,gBAAgB,CAAC,KAAK,EAAE,EAAE,iBAAiB,EAAE,KAAK,EAAE,CAAC,CAAC;aACvE;YAED,IAAI,OAAO,UAAU,KAAK,UAAU,EAAE;gBACpC,UAAU,CAAC,IAAI,CAAC,KAAI,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;aACrC;iBAAM,IAAI,KAAI,CAAC,MAAM,CAAC,OAAO,EAAE;gBAC9B,MAAM,KAAK,CAAC;aACb;QACH,CAAC,CAAC;QAEF,8DAA8D;QAC9D,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,OAAO,EAAE,UAAC,MAAe;YAC3C,IAAI,aAAa,EAAE,CAAC,cAAc,CAAC,KAAK,CAAC,EAAE;gBACzC,aAAa,EAAE,CAAC,SAAS,CAAC,UAAA,KAAK;oBAC7B,IAAI,oBAAY,CAAC,MAAM,EAAE,KAAK,CAAC,EAAE;wBAC/B,KAAK,CAAC,QAAQ,CAAC,SAAS,EAAE,kCAAkC,CAAC,CAAC;wBAC9D,aAAa,EAAE,CAAC,gBAAgB,CAAC,MAAM,EAAE,EAAE,iBAAiB,EAAE,MAAe,EAAE,CAAC,CAAC;qBAClF;yBAAM;wBACL,KAAK,CAAC,QAAQ,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;wBACjC,aAAa,EAAE,CAAC,cAAc,CAAC,kCAAkC,CAAC,CAAC;qBACpE;gBACH,CAAC,CAAC,CAAC;aACJ;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IA/DD;;OAEG;IACW,QAAE,GAAW,OAAO,CAAC;IA8DrC,YAAC;CAAA,AAlED,IAkEC;AAlEY,sBAAK","sourcesContent":["import { EventProcessor, Hub, Integration } from '@sentry/types';\nimport { getGlobalObject, isInstanceOf, logger } from '@sentry/utils';\n\n/** JSDoc */\nexport class Ember implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'Ember';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = Ember.id;\n\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line @typescript-eslint/naming-convention, @typescript-eslint/no-explicit-any\n  private readonly _Ember: any;\n\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  public constructor(options: { Ember?: any } = {}) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access\n    this._Ember = options.Ember || getGlobalObject<any>().Ember;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(_: (callback: EventProcessor) => void, getCurrentHub: () => Hub): void {\n    if (!this._Ember) {\n      logger.error('EmberIntegration is missing an Ember instance');\n      return;\n    }\n\n    /* eslint-disable @typescript-eslint/no-unsafe-member-access */\n    const oldOnError = this._Ember.onerror;\n\n    this._Ember.onerror = (error: Error): void => {\n      if (getCurrentHub().getIntegration(Ember)) {\n        getCurrentHub().captureException(error, { originalException: error });\n      }\n\n      if (typeof oldOnError === 'function') {\n        oldOnError.call(this._Ember, error);\n      } else if (this._Ember.testing) {\n        throw error;\n      }\n    };\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    this._Ember.RSVP.on('error', (reason: unknown): void => {\n      if (getCurrentHub().getIntegration(Ember)) {\n        getCurrentHub().withScope(scope => {\n          if (isInstanceOf(reason, Error)) {\n            scope.setExtra('context', 'Unhandled Promise error detected');\n            getCurrentHub().captureException(reason, { originalException: reason as Error });\n          } else {\n            scope.setExtra('reason', reason);\n            getCurrentHub().captureMessage('Unhandled Promise error detected');\n          }\n        });\n      }\n    });\n  }\n  /* eslint-enable @typescript-eslint/no-unsafe-member-access */\n}\n"]}