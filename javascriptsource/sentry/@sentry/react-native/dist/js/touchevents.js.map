{"version":3,"file":"touchevents.js","sourceRoot":"","sources":["../../src/js/touchevents.tsx"],"names":[],"mappings":"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","sourcesContent":["import { addBreadcrumb } from \"@sentry/core\";\nimport { Severity } from \"@sentry/types\";\nimport * as React from \"react\";\nimport { StyleSheet, View } from \"react-native\";\n\nexport type TouchEventBoundaryProps = {\n  /**\n   * The category assigned to the breadcrumb that is logged by the touch event.\n   */\n  breadcrumbCategory?: string;\n  /**\n   * The type assigned to the breadcrumb that is logged by the touch event.\n   */\n  breadcrumbType?: string;\n  /**\n   * The max number of components to display when logging a touch's component tree.\n   */\n  maxComponentTreeSize?: number;\n  /**\n   * Component name(s) to ignore when logging the touch event. This prevents unhelpful logs such as\n   * \"Touch event within element: View\" where you still can't tell which View it occurred in.\n   */\n  ignoreNames?: Array<string | RegExp>;\n  /**\n   * Deprecated, use ignoreNames instead\n   * @deprecated\n   */\n  ignoredDisplayNames?: Array<string | RegExp>;\n};\n\nconst touchEventStyles = StyleSheet.create({\n  wrapperView: {\n    flex: 1,\n  },\n});\n\nconst DEFAULT_BREADCRUMB_CATEGORY = \"touch\";\nconst DEFAULT_BREADCRUMB_TYPE = \"user\";\nconst DEFAULT_MAX_COMPONENT_TREE_SIZE = 20;\n\ninterface ElementInstance {\n  elementType?: {\n    displayName?: string;\n    name?: string;\n  };\n  return?: ElementInstance;\n}\n\n/**\n * Boundary to log breadcrumbs for interaction events.\n */\nclass TouchEventBoundary extends React.Component<TouchEventBoundaryProps> {\n  public static displayName: string = \"__Sentry.TouchEventBoundary\";\n  public static defaultProps: Partial<TouchEventBoundaryProps> = {\n    breadcrumbCategory: DEFAULT_BREADCRUMB_CATEGORY,\n    breadcrumbType: DEFAULT_BREADCRUMB_TYPE,\n    ignoreNames: [],\n    maxComponentTreeSize: DEFAULT_MAX_COMPONENT_TREE_SIZE,\n  };\n\n  /**\n   *\n   */\n  public render(): React.ReactNode {\n    return (\n      <View\n        style={touchEventStyles.wrapperView}\n        onTouchStart={this._onTouchStart as any}\n      >\n        {this.props.children}\n      </View>\n    );\n  }\n\n  /**\n   *\n   */\n  private _logTouchEvent(\n    componentTreeNames: string[],\n    displayName: string | null\n  ): void {\n    addBreadcrumb({\n      category: this.props.breadcrumbCategory,\n      data: { componentTree: componentTreeNames },\n      level: Severity.Info,\n      message: displayName\n        ? `Touch event within element: ${displayName}`\n        : `Touch event within component tree`,\n      type: this.props.breadcrumbType,\n    });\n  }\n\n  private _isNameIgnored = (name: string): boolean => {\n    let ignoreNames = this.props.ignoreNames || [];\n    // eslint-disable-next-line deprecation/deprecation\n    if (this.props.ignoredDisplayNames) {\n      // This is to make it compatible with prior version.\n      // eslint-disable-next-line deprecation/deprecation\n      ignoreNames = [...ignoreNames, ...this.props.ignoredDisplayNames];\n    }\n\n    return ignoreNames.some(\n      (ignoreName: string | RegExp) =>\n        (typeof ignoreName === \"string\" && name === ignoreName) ||\n        (ignoreName instanceof RegExp && name.match(ignoreName))\n    );\n  };\n\n  // Originally was going to clean the names of any HOCs as well but decided that it might hinder debugging effectively. Will leave here in case\n  // private readonly _cleanName = (name: string): string =>\n  //   name.replace(/.*\\(/g, \"\").replace(/\\)/g, \"\");\n\n  private _onTouchStart = (e: { _targetInst?: ElementInstance }): void => {\n    if (e._targetInst) {\n      let currentInst: ElementInstance | undefined = e._targetInst;\n\n      let activeDisplayName = null;\n      const componentTreeNames: string[] = [];\n\n      while (\n        currentInst &&\n        // maxComponentTreeSize will always be defined as we have a defaultProps. But ts needs a check so this is here.\n        this.props.maxComponentTreeSize &&\n        componentTreeNames.length < this.props.maxComponentTreeSize\n      ) {\n        if (currentInst.elementType) {\n          if (\n            // If the loop gets to the boundary itself, break.\n            currentInst.elementType.displayName ===\n            TouchEventBoundary.displayName\n          ) {\n            break;\n          }\n\n          if (\n            typeof currentInst.elementType.displayName === \"string\" &&\n            !this._isNameIgnored(currentInst.elementType.displayName)\n          ) {\n            const { displayName } = currentInst.elementType;\n            if (activeDisplayName === null) {\n              activeDisplayName = displayName;\n            }\n            componentTreeNames.push(displayName);\n          } else if (\n            typeof currentInst.elementType.name === \"string\" &&\n            !this._isNameIgnored(currentInst.elementType.name)\n          ) {\n            componentTreeNames.push(currentInst.elementType.name);\n          }\n        }\n\n        currentInst = currentInst.return;\n      }\n\n      if (componentTreeNames.length > 0 || activeDisplayName) {\n        this._logTouchEvent(componentTreeNames, activeDisplayName);\n      }\n    }\n  };\n}\n\n/**\n * Convenience Higher-Order-Component for TouchEventBoundary\n * @param WrappedComponent any React Component\n * @param boundaryProps TouchEventBoundaryProps\n */\nconst withTouchEventBoundary = (\n  InnerComponent: React.ComponentType<any>,\n  boundaryProps: TouchEventBoundaryProps\n): React.FunctionComponent => {\n  const WrappedComponent: React.FunctionComponent = (props) => (\n    <TouchEventBoundary {...boundaryProps}>\n      <InnerComponent {...props} />\n    </TouchEventBoundary>\n  );\n\n  WrappedComponent.displayName = \"WithTouchEventBoundary\";\n\n  return WrappedComponent;\n};\n\nexport { TouchEventBoundary, withTouchEventBoundary };\n"]}