{"version":3,"file":"sdk.js","sourceRoot":"","sources":["../../src/js/sdk.ts"],"names":[],"mappings":"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","sourcesContent":["import { initAndBind, setExtra } from \"@sentry/core\";\nimport { Hub, makeMain } from \"@sentry/hub\";\nimport { RewriteFrames } from \"@sentry/integrations\";\nimport { defaultIntegrations, getCurrentHub } from \"@sentry/react\";\nimport { StackFrame } from \"@sentry/types\";\nimport { getGlobalObject } from \"@sentry/utils\";\n\nimport { ReactNativeClient } from \"./client\";\nimport {\n  DebugSymbolicator,\n  DeviceContext,\n  ReactNativeErrorHandlers,\n  Release,\n} from \"./integrations\";\nimport { ReactNativeOptions } from \"./options\";\nimport { ReactNativeScope } from \"./scope\";\n\nconst IGNORED_DEFAULT_INTEGRATIONS = [\n  \"GlobalHandlers\", // We will use the react-native internal handlers\n  \"TryCatch\", // We don't need this\n];\nconst DEFAULT_OPTIONS: ReactNativeOptions = {\n  enableNative: true,\n  enableNativeCrashHandling: true,\n  enableNativeNagger: true,\n};\n\n/**\n * Inits the SDK\n */\nexport function init(\n  passedOptions: ReactNativeOptions = {\n    enableNative: true,\n    enableNativeCrashHandling: true,\n  }\n): void {\n  const reactNativeHub = new Hub(undefined, new ReactNativeScope());\n  makeMain(reactNativeHub);\n\n  const options = {\n    ...DEFAULT_OPTIONS,\n    ...passedOptions,\n  };\n\n  if (options.defaultIntegrations === undefined) {\n    options.defaultIntegrations = [\n      new ReactNativeErrorHandlers(),\n      new Release(),\n      ...defaultIntegrations.filter(\n        (i) => !IGNORED_DEFAULT_INTEGRATIONS.includes(i.name)\n      ),\n    ];\n    if (__DEV__) {\n      options.defaultIntegrations.push(new DebugSymbolicator());\n    }\n    options.defaultIntegrations.push(\n      new RewriteFrames({\n        iteratee: (frame: StackFrame) => {\n          if (frame.filename) {\n            frame.filename = frame.filename\n              .replace(/^file:\\/\\//, \"\")\n              .replace(/^address at /, \"\")\n              .replace(/^.*\\/[^.]+(\\.app|CodePush|.*(?=\\/))/, \"\");\n\n            if (\n              frame.filename !== \"[native code]\" &&\n              frame.filename !== \"native\"\n            ) {\n              const appPrefix = \"app://\";\n              // We always want to have a triple slash\n              frame.filename =\n                frame.filename.indexOf(\"/\") === 0\n                  ? `${appPrefix}${frame.filename}`\n                  : `${appPrefix}/${frame.filename}`;\n            }\n          }\n          return frame;\n        },\n      })\n    );\n    if (options.enableNative) {\n      options.defaultIntegrations.push(new DeviceContext());\n    }\n  }\n\n  initAndBind(ReactNativeClient, options);\n\n  // set the event.origin tag.\n  getCurrentHub().setTag(\"event.origin\", \"javascript\");\n\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  if (getGlobalObject<any>().HermesInternal) {\n    getCurrentHub().setTag(\"hermes\", \"true\");\n  }\n}\n\n/**\n * Deprecated. Sets the release on the event.\n * NOTE: Does not set the release on sessions.\n * @deprecated\n */\nexport function setRelease(release: string): void {\n  setExtra(\"__sentry_release\", release);\n}\n\n/**\n * Deprecated. Sets the dist on the event.\n * NOTE: Does not set the dist on sessions.\n * @deprecated\n */\nexport function setDist(dist: string): void {\n  setExtra(\"__sentry_dist\", dist);\n}\n\n/**\n * If native client is available it will trigger a native crash.\n * Use this only for testing purposes.\n */\nexport function nativeCrash(): void {\n  const client = getCurrentHub().getClient<ReactNativeClient>();\n  if (client) {\n    client.nativeCrash();\n  }\n}\n"]}